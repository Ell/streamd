// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: twitch/v1/eventsub.proto

package twitchv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EventUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Login    string `protobuf:"bytes,2,opt,name=login,proto3" json:"login,omitempty"`
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *EventUser) Reset() {
	*x = EventUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_eventsub_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventUser) ProtoMessage() {}

func (x *EventUser) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_eventsub_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventUser.ProtoReflect.Descriptor instead.
func (*EventUser) Descriptor() ([]byte, []int) {
	return file_twitch_v1_eventsub_proto_rawDescGZIP(), []int{0}
}

func (x *EventUser) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventUser) GetLogin() string {
	if x != nil {
		return x.Login
	}
	return ""
}

func (x *EventUser) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type EventCheermote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Bits   uint64 `protobuf:"varint,2,opt,name=bits,proto3" json:"bits,omitempty"`
}

func (x *EventCheermote) Reset() {
	*x = EventCheermote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_eventsub_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventCheermote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventCheermote) ProtoMessage() {}

func (x *EventCheermote) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_eventsub_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventCheermote.ProtoReflect.Descriptor instead.
func (*EventCheermote) Descriptor() ([]byte, []int) {
	return file_twitch_v1_eventsub_proto_rawDescGZIP(), []int{1}
}

func (x *EventCheermote) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *EventCheermote) GetBits() uint64 {
	if x != nil {
		return x.Bits
	}
	return 0
}

type EventCheer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bits uint64 `protobuf:"varint,1,opt,name=bits,proto3" json:"bits,omitempty"`
}

func (x *EventCheer) Reset() {
	*x = EventCheer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_eventsub_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventCheer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventCheer) ProtoMessage() {}

func (x *EventCheer) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_eventsub_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventCheer.ProtoReflect.Descriptor instead.
func (*EventCheer) Descriptor() ([]byte, []int) {
	return file_twitch_v1_eventsub_proto_rawDescGZIP(), []int{2}
}

func (x *EventCheer) GetBits() uint64 {
	if x != nil {
		return x.Bits
	}
	return 0
}

type EventEmote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EmoteSetId string `protobuf:"bytes,2,opt,name=emote_set_id,json=emoteSetId,proto3" json:"emote_set_id,omitempty"`
	OwnerId    string `protobuf:"bytes,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	Format     string `protobuf:"bytes,4,opt,name=format,proto3" json:"format,omitempty"`
}

func (x *EventEmote) Reset() {
	*x = EventEmote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_eventsub_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventEmote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventEmote) ProtoMessage() {}

func (x *EventEmote) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_eventsub_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventEmote.ProtoReflect.Descriptor instead.
func (*EventEmote) Descriptor() ([]byte, []int) {
	return file_twitch_v1_eventsub_proto_rawDescGZIP(), []int{3}
}

func (x *EventEmote) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventEmote) GetEmoteSetId() string {
	if x != nil {
		return x.EmoteSetId
	}
	return ""
}

func (x *EventEmote) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *EventEmote) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

type EventBadge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetId string `protobuf:"bytes,1,opt,name=set_id,json=setId,proto3" json:"set_id,omitempty"`
	Id    string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Info  string `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *EventBadge) Reset() {
	*x = EventBadge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_eventsub_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventBadge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBadge) ProtoMessage() {}

func (x *EventBadge) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_eventsub_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBadge.ProtoReflect.Descriptor instead.
func (*EventBadge) Descriptor() ([]byte, []int) {
	return file_twitch_v1_eventsub_proto_rawDescGZIP(), []int{4}
}

func (x *EventBadge) GetSetId() string {
	if x != nil {
		return x.SetId
	}
	return ""
}

func (x *EventBadge) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventBadge) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

type EventMessageFragment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      string          `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Text      string          `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Cheermote *EventCheermote `protobuf:"bytes,3,opt,name=cheermote,proto3" json:"cheermote,omitempty"`
	Emote     *EventEmote     `protobuf:"bytes,4,opt,name=emote,proto3" json:"emote,omitempty"`
	Mention   *EventUser      `protobuf:"bytes,5,opt,name=mention,proto3" json:"mention,omitempty"`
}

func (x *EventMessageFragment) Reset() {
	*x = EventMessageFragment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_eventsub_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventMessageFragment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventMessageFragment) ProtoMessage() {}

func (x *EventMessageFragment) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_eventsub_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventMessageFragment.ProtoReflect.Descriptor instead.
func (*EventMessageFragment) Descriptor() ([]byte, []int) {
	return file_twitch_v1_eventsub_proto_rawDescGZIP(), []int{5}
}

func (x *EventMessageFragment) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *EventMessageFragment) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *EventMessageFragment) GetCheermote() *EventCheermote {
	if x != nil {
		return x.Cheermote
	}
	return nil
}

func (x *EventMessageFragment) GetEmote() *EventEmote {
	if x != nil {
		return x.Emote
	}
	return nil
}

func (x *EventMessageFragment) GetMention() *EventUser {
	if x != nil {
		return x.Mention
	}
	return nil
}

type EventReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentMessageId   string     `protobuf:"bytes,1,opt,name=parent_message_id,json=parentMessageId,proto3" json:"parent_message_id,omitempty"`
	ParentMessageBody string     `protobuf:"bytes,2,opt,name=parent_message_body,json=parentMessageBody,proto3" json:"parent_message_body,omitempty"`
	ParentUser        *EventUser `protobuf:"bytes,3,opt,name=parent_user,json=parentUser,proto3" json:"parent_user,omitempty"`
	ThreadMessageId   string     `protobuf:"bytes,4,opt,name=thread_message_id,json=threadMessageId,proto3" json:"thread_message_id,omitempty"`
	ThreadMessageBody string     `protobuf:"bytes,5,opt,name=thread_message_body,json=threadMessageBody,proto3" json:"thread_message_body,omitempty"`
	ThreadUser        *EventUser `protobuf:"bytes,6,opt,name=thread_user,json=threadUser,proto3" json:"thread_user,omitempty"`
}

func (x *EventReply) Reset() {
	*x = EventReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_eventsub_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventReply) ProtoMessage() {}

func (x *EventReply) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_eventsub_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventReply.ProtoReflect.Descriptor instead.
func (*EventReply) Descriptor() ([]byte, []int) {
	return file_twitch_v1_eventsub_proto_rawDescGZIP(), []int{6}
}

func (x *EventReply) GetParentMessageId() string {
	if x != nil {
		return x.ParentMessageId
	}
	return ""
}

func (x *EventReply) GetParentMessageBody() string {
	if x != nil {
		return x.ParentMessageBody
	}
	return ""
}

func (x *EventReply) GetParentUser() *EventUser {
	if x != nil {
		return x.ParentUser
	}
	return nil
}

func (x *EventReply) GetThreadMessageId() string {
	if x != nil {
		return x.ThreadMessageId
	}
	return ""
}

func (x *EventReply) GetThreadMessageBody() string {
	if x != nil {
		return x.ThreadMessageBody
	}
	return ""
}

func (x *EventReply) GetThreadUser() *EventUser {
	if x != nil {
		return x.ThreadUser
	}
	return nil
}

type ChannelChatMessageEventMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text      string                  `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Fragments []*EventMessageFragment `protobuf:"bytes,2,rep,name=fragments,proto3" json:"fragments,omitempty"`
}

func (x *ChannelChatMessageEventMessage) Reset() {
	*x = ChannelChatMessageEventMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_eventsub_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelChatMessageEventMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelChatMessageEventMessage) ProtoMessage() {}

func (x *ChannelChatMessageEventMessage) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_eventsub_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelChatMessageEventMessage.ProtoReflect.Descriptor instead.
func (*ChannelChatMessageEventMessage) Descriptor() ([]byte, []int) {
	return file_twitch_v1_eventsub_proto_rawDescGZIP(), []int{7}
}

func (x *ChannelChatMessageEventMessage) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ChannelChatMessageEventMessage) GetFragments() []*EventMessageFragment {
	if x != nil {
		return x.Fragments
	}
	return nil
}

type ChannelChatMessageCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcasterUserId string `protobuf:"bytes,1,opt,name=broadcaster_user_id,json=broadcasterUserId,proto3" json:"broadcaster_user_id,omitempty"`
	UserId            string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *ChannelChatMessageCondition) Reset() {
	*x = ChannelChatMessageCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_eventsub_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelChatMessageCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelChatMessageCondition) ProtoMessage() {}

func (x *ChannelChatMessageCondition) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_eventsub_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelChatMessageCondition.ProtoReflect.Descriptor instead.
func (*ChannelChatMessageCondition) Descriptor() ([]byte, []int) {
	return file_twitch_v1_eventsub_proto_rawDescGZIP(), []int{8}
}

func (x *ChannelChatMessageCondition) GetBroadcasterUserId() string {
	if x != nil {
		return x.BroadcasterUserId
	}
	return ""
}

func (x *ChannelChatMessageCondition) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type ChannelChatMessageEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Broadcaster                 *EventUser    `protobuf:"bytes,1,opt,name=broadcaster,proto3" json:"broadcaster,omitempty"`
	Chatter                     *EventUser    `protobuf:"bytes,2,opt,name=chatter,proto3" json:"chatter,omitempty"`
	MessageId                   string        `protobuf:"bytes,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Color                       string        `protobuf:"bytes,4,opt,name=color,proto3" json:"color,omitempty"`
	Badges                      []*EventBadge `protobuf:"bytes,5,rep,name=badges,proto3" json:"badges,omitempty"`
	MessageType                 string        `protobuf:"bytes,6,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	Cheer                       *EventCheer   `protobuf:"bytes,7,opt,name=cheer,proto3" json:"cheer,omitempty"`
	ChannelPointsCustomRewardId string        `protobuf:"bytes,8,opt,name=channel_points_custom_reward_id,json=channelPointsCustomRewardId,proto3" json:"channel_points_custom_reward_id,omitempty"`
	Reply                       *EventReply   `protobuf:"bytes,9,opt,name=reply,proto3" json:"reply,omitempty"`
}

func (x *ChannelChatMessageEvent) Reset() {
	*x = ChannelChatMessageEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_eventsub_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelChatMessageEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelChatMessageEvent) ProtoMessage() {}

func (x *ChannelChatMessageEvent) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_eventsub_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelChatMessageEvent.ProtoReflect.Descriptor instead.
func (*ChannelChatMessageEvent) Descriptor() ([]byte, []int) {
	return file_twitch_v1_eventsub_proto_rawDescGZIP(), []int{9}
}

func (x *ChannelChatMessageEvent) GetBroadcaster() *EventUser {
	if x != nil {
		return x.Broadcaster
	}
	return nil
}

func (x *ChannelChatMessageEvent) GetChatter() *EventUser {
	if x != nil {
		return x.Chatter
	}
	return nil
}

func (x *ChannelChatMessageEvent) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *ChannelChatMessageEvent) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *ChannelChatMessageEvent) GetBadges() []*EventBadge {
	if x != nil {
		return x.Badges
	}
	return nil
}

func (x *ChannelChatMessageEvent) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *ChannelChatMessageEvent) GetCheer() *EventCheer {
	if x != nil {
		return x.Cheer
	}
	return nil
}

func (x *ChannelChatMessageEvent) GetChannelPointsCustomRewardId() string {
	if x != nil {
		return x.ChannelPointsCustomRewardId
	}
	return ""
}

func (x *ChannelChatMessageEvent) GetReply() *EventReply {
	if x != nil {
		return x.Reply
	}
	return nil
}

type ChannelFollowCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcasterUserId string `protobuf:"bytes,1,opt,name=broadcaster_user_id,json=broadcasterUserId,proto3" json:"broadcaster_user_id,omitempty"`
	ModeratorUserId   string `protobuf:"bytes,2,opt,name=moderator_user_id,json=moderatorUserId,proto3" json:"moderator_user_id,omitempty"`
}

func (x *ChannelFollowCondition) Reset() {
	*x = ChannelFollowCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_eventsub_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelFollowCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelFollowCondition) ProtoMessage() {}

func (x *ChannelFollowCondition) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_eventsub_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelFollowCondition.ProtoReflect.Descriptor instead.
func (*ChannelFollowCondition) Descriptor() ([]byte, []int) {
	return file_twitch_v1_eventsub_proto_rawDescGZIP(), []int{10}
}

func (x *ChannelFollowCondition) GetBroadcasterUserId() string {
	if x != nil {
		return x.BroadcasterUserId
	}
	return ""
}

func (x *ChannelFollowCondition) GetModeratorUserId() string {
	if x != nil {
		return x.ModeratorUserId
	}
	return ""
}

type ChannelFollowEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User        *EventUser `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Broadcaster *EventUser `protobuf:"bytes,2,opt,name=broadcaster,proto3" json:"broadcaster,omitempty"`
	FollowedAt  string     `protobuf:"bytes,3,opt,name=followed_at,json=followedAt,proto3" json:"followed_at,omitempty"`
}

func (x *ChannelFollowEvent) Reset() {
	*x = ChannelFollowEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_eventsub_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelFollowEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelFollowEvent) ProtoMessage() {}

func (x *ChannelFollowEvent) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_eventsub_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelFollowEvent.ProtoReflect.Descriptor instead.
func (*ChannelFollowEvent) Descriptor() ([]byte, []int) {
	return file_twitch_v1_eventsub_proto_rawDescGZIP(), []int{11}
}

func (x *ChannelFollowEvent) GetUser() *EventUser {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *ChannelFollowEvent) GetBroadcaster() *EventUser {
	if x != nil {
		return x.Broadcaster
	}
	return nil
}

func (x *ChannelFollowEvent) GetFollowedAt() string {
	if x != nil {
		return x.FollowedAt
	}
	return ""
}

type ChannelAdBreakCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcasterUserId string `protobuf:"bytes,1,opt,name=broadcaster_user_id,json=broadcasterUserId,proto3" json:"broadcaster_user_id,omitempty"`
}

func (x *ChannelAdBreakCondition) Reset() {
	*x = ChannelAdBreakCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_eventsub_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelAdBreakCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelAdBreakCondition) ProtoMessage() {}

func (x *ChannelAdBreakCondition) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_eventsub_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelAdBreakCondition.ProtoReflect.Descriptor instead.
func (*ChannelAdBreakCondition) Descriptor() ([]byte, []int) {
	return file_twitch_v1_eventsub_proto_rawDescGZIP(), []int{12}
}

func (x *ChannelAdBreakCondition) GetBroadcasterUserId() string {
	if x != nil {
		return x.BroadcasterUserId
	}
	return ""
}

type ChannelAdBreakEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DurationSeconds string     `protobuf:"bytes,1,opt,name=duration_seconds,json=durationSeconds,proto3" json:"duration_seconds,omitempty"`
	StartedAt       string     `protobuf:"bytes,2,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	IsAutomatic     string     `protobuf:"bytes,3,opt,name=is_automatic,json=isAutomatic,proto3" json:"is_automatic,omitempty"`
	Broadcaster     *EventUser `protobuf:"bytes,4,opt,name=broadcaster,proto3" json:"broadcaster,omitempty"`
	Requester       *EventUser `protobuf:"bytes,5,opt,name=requester,proto3" json:"requester,omitempty"`
}

func (x *ChannelAdBreakEvent) Reset() {
	*x = ChannelAdBreakEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_eventsub_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelAdBreakEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelAdBreakEvent) ProtoMessage() {}

func (x *ChannelAdBreakEvent) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_eventsub_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelAdBreakEvent.ProtoReflect.Descriptor instead.
func (*ChannelAdBreakEvent) Descriptor() ([]byte, []int) {
	return file_twitch_v1_eventsub_proto_rawDescGZIP(), []int{13}
}

func (x *ChannelAdBreakEvent) GetDurationSeconds() string {
	if x != nil {
		return x.DurationSeconds
	}
	return ""
}

func (x *ChannelAdBreakEvent) GetStartedAt() string {
	if x != nil {
		return x.StartedAt
	}
	return ""
}

func (x *ChannelAdBreakEvent) GetIsAutomatic() string {
	if x != nil {
		return x.IsAutomatic
	}
	return ""
}

func (x *ChannelAdBreakEvent) GetBroadcaster() *EventUser {
	if x != nil {
		return x.Broadcaster
	}
	return nil
}

func (x *ChannelAdBreakEvent) GetRequester() *EventUser {
	if x != nil {
		return x.Requester
	}
	return nil
}

type ChannelSubscribeCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcasterUserId string `protobuf:"bytes,1,opt,name=broadcaster_user_id,json=broadcasterUserId,proto3" json:"broadcaster_user_id,omitempty"`
}

func (x *ChannelSubscribeCondition) Reset() {
	*x = ChannelSubscribeCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_eventsub_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelSubscribeCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelSubscribeCondition) ProtoMessage() {}

func (x *ChannelSubscribeCondition) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_eventsub_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelSubscribeCondition.ProtoReflect.Descriptor instead.
func (*ChannelSubscribeCondition) Descriptor() ([]byte, []int) {
	return file_twitch_v1_eventsub_proto_rawDescGZIP(), []int{14}
}

func (x *ChannelSubscribeCondition) GetBroadcasterUserId() string {
	if x != nil {
		return x.BroadcasterUserId
	}
	return ""
}

type ChannelSubscribeEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User        *EventUser `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Broadcaster *EventUser `protobuf:"bytes,2,opt,name=broadcaster,proto3" json:"broadcaster,omitempty"`
	Tier        string     `protobuf:"bytes,3,opt,name=tier,proto3" json:"tier,omitempty"`
	IsGift      string     `protobuf:"bytes,4,opt,name=is_gift,json=isGift,proto3" json:"is_gift,omitempty"`
}

func (x *ChannelSubscribeEvent) Reset() {
	*x = ChannelSubscribeEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_eventsub_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelSubscribeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelSubscribeEvent) ProtoMessage() {}

func (x *ChannelSubscribeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_eventsub_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelSubscribeEvent.ProtoReflect.Descriptor instead.
func (*ChannelSubscribeEvent) Descriptor() ([]byte, []int) {
	return file_twitch_v1_eventsub_proto_rawDescGZIP(), []int{15}
}

func (x *ChannelSubscribeEvent) GetUser() *EventUser {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *ChannelSubscribeEvent) GetBroadcaster() *EventUser {
	if x != nil {
		return x.Broadcaster
	}
	return nil
}

func (x *ChannelSubscribeEvent) GetTier() string {
	if x != nil {
		return x.Tier
	}
	return ""
}

func (x *ChannelSubscribeEvent) GetIsGift() string {
	if x != nil {
		return x.IsGift
	}
	return ""
}

type ChannelSubscriptionGiftCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcasterUserId string `protobuf:"bytes,1,opt,name=broadcaster_user_id,json=broadcasterUserId,proto3" json:"broadcaster_user_id,omitempty"`
}

func (x *ChannelSubscriptionGiftCondition) Reset() {
	*x = ChannelSubscriptionGiftCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_eventsub_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelSubscriptionGiftCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelSubscriptionGiftCondition) ProtoMessage() {}

func (x *ChannelSubscriptionGiftCondition) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_eventsub_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelSubscriptionGiftCondition.ProtoReflect.Descriptor instead.
func (*ChannelSubscriptionGiftCondition) Descriptor() ([]byte, []int) {
	return file_twitch_v1_eventsub_proto_rawDescGZIP(), []int{16}
}

func (x *ChannelSubscriptionGiftCondition) GetBroadcasterUserId() string {
	if x != nil {
		return x.BroadcasterUserId
	}
	return ""
}

type ChannelSubscriptionGiftEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User            *EventUser `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Broadcaster     *EventUser `protobuf:"bytes,2,opt,name=broadcaster,proto3" json:"broadcaster,omitempty"`
	Total           uint64     `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	Tier            string     `protobuf:"bytes,4,opt,name=tier,proto3" json:"tier,omitempty"`
	CumulativeTotal uint64     `protobuf:"varint,5,opt,name=cumulative_total,json=cumulativeTotal,proto3" json:"cumulative_total,omitempty"`
	IsAnonymous     bool       `protobuf:"varint,6,opt,name=is_anonymous,json=isAnonymous,proto3" json:"is_anonymous,omitempty"`
}

func (x *ChannelSubscriptionGiftEvent) Reset() {
	*x = ChannelSubscriptionGiftEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_eventsub_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelSubscriptionGiftEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelSubscriptionGiftEvent) ProtoMessage() {}

func (x *ChannelSubscriptionGiftEvent) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_eventsub_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelSubscriptionGiftEvent.ProtoReflect.Descriptor instead.
func (*ChannelSubscriptionGiftEvent) Descriptor() ([]byte, []int) {
	return file_twitch_v1_eventsub_proto_rawDescGZIP(), []int{17}
}

func (x *ChannelSubscriptionGiftEvent) GetUser() *EventUser {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *ChannelSubscriptionGiftEvent) GetBroadcaster() *EventUser {
	if x != nil {
		return x.Broadcaster
	}
	return nil
}

func (x *ChannelSubscriptionGiftEvent) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ChannelSubscriptionGiftEvent) GetTier() string {
	if x != nil {
		return x.Tier
	}
	return ""
}

func (x *ChannelSubscriptionGiftEvent) GetCumulativeTotal() uint64 {
	if x != nil {
		return x.CumulativeTotal
	}
	return 0
}

func (x *ChannelSubscriptionGiftEvent) GetIsAnonymous() bool {
	if x != nil {
		return x.IsAnonymous
	}
	return false
}

type ChannelCheerCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcasterUserId string `protobuf:"bytes,1,opt,name=broadcaster_user_id,json=broadcasterUserId,proto3" json:"broadcaster_user_id,omitempty"`
}

func (x *ChannelCheerCondition) Reset() {
	*x = ChannelCheerCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_eventsub_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelCheerCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelCheerCondition) ProtoMessage() {}

func (x *ChannelCheerCondition) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_eventsub_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelCheerCondition.ProtoReflect.Descriptor instead.
func (*ChannelCheerCondition) Descriptor() ([]byte, []int) {
	return file_twitch_v1_eventsub_proto_rawDescGZIP(), []int{18}
}

func (x *ChannelCheerCondition) GetBroadcasterUserId() string {
	if x != nil {
		return x.BroadcasterUserId
	}
	return ""
}

type ChannelCheerEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAnonymous bool       `protobuf:"varint,1,opt,name=is_anonymous,json=isAnonymous,proto3" json:"is_anonymous,omitempty"`
	User        *EventUser `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Broadcaster *EventUser `protobuf:"bytes,3,opt,name=broadcaster,proto3" json:"broadcaster,omitempty"`
	Message     string     `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	Bits        uint64     `protobuf:"varint,5,opt,name=bits,proto3" json:"bits,omitempty"`
}

func (x *ChannelCheerEvent) Reset() {
	*x = ChannelCheerEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_eventsub_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelCheerEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelCheerEvent) ProtoMessage() {}

func (x *ChannelCheerEvent) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_eventsub_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelCheerEvent.ProtoReflect.Descriptor instead.
func (*ChannelCheerEvent) Descriptor() ([]byte, []int) {
	return file_twitch_v1_eventsub_proto_rawDescGZIP(), []int{19}
}

func (x *ChannelCheerEvent) GetIsAnonymous() bool {
	if x != nil {
		return x.IsAnonymous
	}
	return false
}

func (x *ChannelCheerEvent) GetUser() *EventUser {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *ChannelCheerEvent) GetBroadcaster() *EventUser {
	if x != nil {
		return x.Broadcaster
	}
	return nil
}

func (x *ChannelCheerEvent) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ChannelCheerEvent) GetBits() uint64 {
	if x != nil {
		return x.Bits
	}
	return 0
}

type ChannelRaidCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToBroadcasterUserId string `protobuf:"bytes,1,opt,name=to_broadcaster_user_id,json=toBroadcasterUserId,proto3" json:"to_broadcaster_user_id,omitempty"`
}

func (x *ChannelRaidCondition) Reset() {
	*x = ChannelRaidCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_eventsub_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelRaidCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelRaidCondition) ProtoMessage() {}

func (x *ChannelRaidCondition) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_eventsub_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelRaidCondition.ProtoReflect.Descriptor instead.
func (*ChannelRaidCondition) Descriptor() ([]byte, []int) {
	return file_twitch_v1_eventsub_proto_rawDescGZIP(), []int{20}
}

func (x *ChannelRaidCondition) GetToBroadcasterUserId() string {
	if x != nil {
		return x.ToBroadcasterUserId
	}
	return ""
}

type ChannelRaidEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromBroadcaster *EventUser `protobuf:"bytes,1,opt,name=from_broadcaster,json=fromBroadcaster,proto3" json:"from_broadcaster,omitempty"`
	ToBroadcaster   *EventUser `protobuf:"bytes,2,opt,name=to_broadcaster,json=toBroadcaster,proto3" json:"to_broadcaster,omitempty"`
	Viewers         uint64     `protobuf:"varint,3,opt,name=viewers,proto3" json:"viewers,omitempty"`
}

func (x *ChannelRaidEvent) Reset() {
	*x = ChannelRaidEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_eventsub_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelRaidEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelRaidEvent) ProtoMessage() {}

func (x *ChannelRaidEvent) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_eventsub_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelRaidEvent.ProtoReflect.Descriptor instead.
func (*ChannelRaidEvent) Descriptor() ([]byte, []int) {
	return file_twitch_v1_eventsub_proto_rawDescGZIP(), []int{21}
}

func (x *ChannelRaidEvent) GetFromBroadcaster() *EventUser {
	if x != nil {
		return x.FromBroadcaster
	}
	return nil
}

func (x *ChannelRaidEvent) GetToBroadcaster() *EventUser {
	if x != nil {
		return x.ToBroadcaster
	}
	return nil
}

func (x *ChannelRaidEvent) GetViewers() uint64 {
	if x != nil {
		return x.Viewers
	}
	return 0
}

type ChannelPointsCustomRewardRedemptionCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcasterUserId string `protobuf:"bytes,1,opt,name=broadcaster_user_id,json=broadcasterUserId,proto3" json:"broadcaster_user_id,omitempty"`
	RewardId          string `protobuf:"bytes,2,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
}

func (x *ChannelPointsCustomRewardRedemptionCondition) Reset() {
	*x = ChannelPointsCustomRewardRedemptionCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_eventsub_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelPointsCustomRewardRedemptionCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelPointsCustomRewardRedemptionCondition) ProtoMessage() {}

func (x *ChannelPointsCustomRewardRedemptionCondition) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_eventsub_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelPointsCustomRewardRedemptionCondition.ProtoReflect.Descriptor instead.
func (*ChannelPointsCustomRewardRedemptionCondition) Descriptor() ([]byte, []int) {
	return file_twitch_v1_eventsub_proto_rawDescGZIP(), []int{22}
}

func (x *ChannelPointsCustomRewardRedemptionCondition) GetBroadcasterUserId() string {
	if x != nil {
		return x.BroadcasterUserId
	}
	return ""
}

func (x *ChannelPointsCustomRewardRedemptionCondition) GetRewardId() string {
	if x != nil {
		return x.RewardId
	}
	return ""
}

type EventChannelPointsCustomReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title  string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Cost   uint64 `protobuf:"varint,3,opt,name=cost,proto3" json:"cost,omitempty"`
	Prompt string `protobuf:"bytes,4,opt,name=prompt,proto3" json:"prompt,omitempty"`
}

func (x *EventChannelPointsCustomReward) Reset() {
	*x = EventChannelPointsCustomReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_eventsub_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventChannelPointsCustomReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventChannelPointsCustomReward) ProtoMessage() {}

func (x *EventChannelPointsCustomReward) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_eventsub_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventChannelPointsCustomReward.ProtoReflect.Descriptor instead.
func (*EventChannelPointsCustomReward) Descriptor() ([]byte, []int) {
	return file_twitch_v1_eventsub_proto_rawDescGZIP(), []int{23}
}

func (x *EventChannelPointsCustomReward) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventChannelPointsCustomReward) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *EventChannelPointsCustomReward) GetCost() uint64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *EventChannelPointsCustomReward) GetPrompt() string {
	if x != nil {
		return x.Prompt
	}
	return ""
}

type ChannelPointsCustomRewardRedemptionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Broadcaster *EventUser                      `protobuf:"bytes,2,opt,name=broadcaster,proto3" json:"broadcaster,omitempty"`
	User        *EventUser                      `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	Status      string                          `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Reward      *EventChannelPointsCustomReward `protobuf:"bytes,5,opt,name=reward,proto3" json:"reward,omitempty"`
	RedeemedAt  string                          `protobuf:"bytes,6,opt,name=redeemed_at,json=redeemedAt,proto3" json:"redeemed_at,omitempty"`
}

func (x *ChannelPointsCustomRewardRedemptionEvent) Reset() {
	*x = ChannelPointsCustomRewardRedemptionEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_eventsub_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelPointsCustomRewardRedemptionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelPointsCustomRewardRedemptionEvent) ProtoMessage() {}

func (x *ChannelPointsCustomRewardRedemptionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_eventsub_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelPointsCustomRewardRedemptionEvent.ProtoReflect.Descriptor instead.
func (*ChannelPointsCustomRewardRedemptionEvent) Descriptor() ([]byte, []int) {
	return file_twitch_v1_eventsub_proto_rawDescGZIP(), []int{24}
}

func (x *ChannelPointsCustomRewardRedemptionEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ChannelPointsCustomRewardRedemptionEvent) GetBroadcaster() *EventUser {
	if x != nil {
		return x.Broadcaster
	}
	return nil
}

func (x *ChannelPointsCustomRewardRedemptionEvent) GetUser() *EventUser {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *ChannelPointsCustomRewardRedemptionEvent) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ChannelPointsCustomRewardRedemptionEvent) GetReward() *EventChannelPointsCustomReward {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *ChannelPointsCustomRewardRedemptionEvent) GetRedeemedAt() string {
	if x != nil {
		return x.RedeemedAt
	}
	return ""
}

type EventCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Condition:
	//
	//	*EventCondition_ChannelChatMessage
	//	*EventCondition_ChannelFollow
	//	*EventCondition_ChannelAdBreak
	//	*EventCondition_ChannelSubscribe
	//	*EventCondition_ChannelSubscriptionGift
	//	*EventCondition_ChannelCheer
	//	*EventCondition_ChannelRaid
	//	*EventCondition_ChannelPointsCustomRewardRedemption
	Condition isEventCondition_Condition `protobuf_oneof:"condition"`
}

func (x *EventCondition) Reset() {
	*x = EventCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_eventsub_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventCondition) ProtoMessage() {}

func (x *EventCondition) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_eventsub_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventCondition.ProtoReflect.Descriptor instead.
func (*EventCondition) Descriptor() ([]byte, []int) {
	return file_twitch_v1_eventsub_proto_rawDescGZIP(), []int{25}
}

func (m *EventCondition) GetCondition() isEventCondition_Condition {
	if m != nil {
		return m.Condition
	}
	return nil
}

func (x *EventCondition) GetChannelChatMessage() *ChannelChatMessageCondition {
	if x, ok := x.GetCondition().(*EventCondition_ChannelChatMessage); ok {
		return x.ChannelChatMessage
	}
	return nil
}

func (x *EventCondition) GetChannelFollow() *ChannelFollowCondition {
	if x, ok := x.GetCondition().(*EventCondition_ChannelFollow); ok {
		return x.ChannelFollow
	}
	return nil
}

func (x *EventCondition) GetChannelAdBreak() *ChannelAdBreakCondition {
	if x, ok := x.GetCondition().(*EventCondition_ChannelAdBreak); ok {
		return x.ChannelAdBreak
	}
	return nil
}

func (x *EventCondition) GetChannelSubscribe() *ChannelSubscribeCondition {
	if x, ok := x.GetCondition().(*EventCondition_ChannelSubscribe); ok {
		return x.ChannelSubscribe
	}
	return nil
}

func (x *EventCondition) GetChannelSubscriptionGift() *ChannelSubscriptionGiftCondition {
	if x, ok := x.GetCondition().(*EventCondition_ChannelSubscriptionGift); ok {
		return x.ChannelSubscriptionGift
	}
	return nil
}

func (x *EventCondition) GetChannelCheer() *ChannelCheerCondition {
	if x, ok := x.GetCondition().(*EventCondition_ChannelCheer); ok {
		return x.ChannelCheer
	}
	return nil
}

func (x *EventCondition) GetChannelRaid() *ChannelRaidCondition {
	if x, ok := x.GetCondition().(*EventCondition_ChannelRaid); ok {
		return x.ChannelRaid
	}
	return nil
}

func (x *EventCondition) GetChannelPointsCustomRewardRedemption() *ChannelPointsCustomRewardRedemptionCondition {
	if x, ok := x.GetCondition().(*EventCondition_ChannelPointsCustomRewardRedemption); ok {
		return x.ChannelPointsCustomRewardRedemption
	}
	return nil
}

type isEventCondition_Condition interface {
	isEventCondition_Condition()
}

type EventCondition_ChannelChatMessage struct {
	ChannelChatMessage *ChannelChatMessageCondition `protobuf:"bytes,1,opt,name=channel_chat_message,json=channelChatMessage,proto3,oneof"`
}

type EventCondition_ChannelFollow struct {
	ChannelFollow *ChannelFollowCondition `protobuf:"bytes,2,opt,name=channel_follow,json=channelFollow,proto3,oneof"`
}

type EventCondition_ChannelAdBreak struct {
	ChannelAdBreak *ChannelAdBreakCondition `protobuf:"bytes,3,opt,name=channel_ad_break,json=channelAdBreak,proto3,oneof"`
}

type EventCondition_ChannelSubscribe struct {
	ChannelSubscribe *ChannelSubscribeCondition `protobuf:"bytes,4,opt,name=channel_subscribe,json=channelSubscribe,proto3,oneof"`
}

type EventCondition_ChannelSubscriptionGift struct {
	ChannelSubscriptionGift *ChannelSubscriptionGiftCondition `protobuf:"bytes,5,opt,name=channel_subscription_gift,json=channelSubscriptionGift,proto3,oneof"`
}

type EventCondition_ChannelCheer struct {
	ChannelCheer *ChannelCheerCondition `protobuf:"bytes,6,opt,name=channel_cheer,json=channelCheer,proto3,oneof"`
}

type EventCondition_ChannelRaid struct {
	ChannelRaid *ChannelRaidCondition `protobuf:"bytes,7,opt,name=channel_raid,json=channelRaid,proto3,oneof"`
}

type EventCondition_ChannelPointsCustomRewardRedemption struct {
	ChannelPointsCustomRewardRedemption *ChannelPointsCustomRewardRedemptionCondition `protobuf:"bytes,8,opt,name=channel_points_custom_reward_redemption,json=channelPointsCustomRewardRedemption,proto3,oneof"`
}

func (*EventCondition_ChannelChatMessage) isEventCondition_Condition() {}

func (*EventCondition_ChannelFollow) isEventCondition_Condition() {}

func (*EventCondition_ChannelAdBreak) isEventCondition_Condition() {}

func (*EventCondition_ChannelSubscribe) isEventCondition_Condition() {}

func (*EventCondition_ChannelSubscriptionGift) isEventCondition_Condition() {}

func (*EventCondition_ChannelCheer) isEventCondition_Condition() {}

func (*EventCondition_ChannelRaid) isEventCondition_Condition() {}

func (*EventCondition_ChannelPointsCustomRewardRedemption) isEventCondition_Condition() {}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//
	//	*Event_ChannelChatMessage
	//	*Event_ChannelFollow
	//	*Event_ChannelAdBreak
	//	*Event_ChannelSubscribe
	//	*Event_ChannelSubscriptionGift
	//	*Event_ChannelCheer
	//	*Event_ChannelRaid
	//	*Event_ChannelPointsCustomRewardRedemption
	Event isEvent_Event `protobuf_oneof:"event"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_eventsub_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_eventsub_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_twitch_v1_eventsub_proto_rawDescGZIP(), []int{26}
}

func (m *Event) GetEvent() isEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *Event) GetChannelChatMessage() *ChannelChatMessageEvent {
	if x, ok := x.GetEvent().(*Event_ChannelChatMessage); ok {
		return x.ChannelChatMessage
	}
	return nil
}

func (x *Event) GetChannelFollow() *ChannelFollowEvent {
	if x, ok := x.GetEvent().(*Event_ChannelFollow); ok {
		return x.ChannelFollow
	}
	return nil
}

func (x *Event) GetChannelAdBreak() *ChannelAdBreakEvent {
	if x, ok := x.GetEvent().(*Event_ChannelAdBreak); ok {
		return x.ChannelAdBreak
	}
	return nil
}

func (x *Event) GetChannelSubscribe() *ChannelSubscribeEvent {
	if x, ok := x.GetEvent().(*Event_ChannelSubscribe); ok {
		return x.ChannelSubscribe
	}
	return nil
}

func (x *Event) GetChannelSubscriptionGift() *ChannelSubscriptionGiftEvent {
	if x, ok := x.GetEvent().(*Event_ChannelSubscriptionGift); ok {
		return x.ChannelSubscriptionGift
	}
	return nil
}

func (x *Event) GetChannelCheer() *ChannelCheerEvent {
	if x, ok := x.GetEvent().(*Event_ChannelCheer); ok {
		return x.ChannelCheer
	}
	return nil
}

func (x *Event) GetChannelRaid() *ChannelRaidEvent {
	if x, ok := x.GetEvent().(*Event_ChannelRaid); ok {
		return x.ChannelRaid
	}
	return nil
}

func (x *Event) GetChannelPointsCustomRewardRedemption() *ChannelPointsCustomRewardRedemptionEvent {
	if x, ok := x.GetEvent().(*Event_ChannelPointsCustomRewardRedemption); ok {
		return x.ChannelPointsCustomRewardRedemption
	}
	return nil
}

type isEvent_Event interface {
	isEvent_Event()
}

type Event_ChannelChatMessage struct {
	ChannelChatMessage *ChannelChatMessageEvent `protobuf:"bytes,1,opt,name=channel_chat_message,json=channelChatMessage,proto3,oneof"`
}

type Event_ChannelFollow struct {
	ChannelFollow *ChannelFollowEvent `protobuf:"bytes,2,opt,name=channel_follow,json=channelFollow,proto3,oneof"`
}

type Event_ChannelAdBreak struct {
	ChannelAdBreak *ChannelAdBreakEvent `protobuf:"bytes,3,opt,name=channel_ad_break,json=channelAdBreak,proto3,oneof"`
}

type Event_ChannelSubscribe struct {
	ChannelSubscribe *ChannelSubscribeEvent `protobuf:"bytes,4,opt,name=channel_subscribe,json=channelSubscribe,proto3,oneof"`
}

type Event_ChannelSubscriptionGift struct {
	ChannelSubscriptionGift *ChannelSubscriptionGiftEvent `protobuf:"bytes,5,opt,name=channel_subscription_gift,json=channelSubscriptionGift,proto3,oneof"`
}

type Event_ChannelCheer struct {
	ChannelCheer *ChannelCheerEvent `protobuf:"bytes,6,opt,name=channel_cheer,json=channelCheer,proto3,oneof"`
}

type Event_ChannelRaid struct {
	ChannelRaid *ChannelRaidEvent `protobuf:"bytes,7,opt,name=channel_raid,json=channelRaid,proto3,oneof"`
}

type Event_ChannelPointsCustomRewardRedemption struct {
	ChannelPointsCustomRewardRedemption *ChannelPointsCustomRewardRedemptionEvent `protobuf:"bytes,8,opt,name=channel_points_custom_reward_redemption,json=channelPointsCustomRewardRedemption,proto3,oneof"`
}

func (*Event_ChannelChatMessage) isEvent_Event() {}

func (*Event_ChannelFollow) isEvent_Event() {}

func (*Event_ChannelAdBreak) isEvent_Event() {}

func (*Event_ChannelSubscribe) isEvent_Event() {}

func (*Event_ChannelSubscriptionGift) isEvent_Event() {}

func (*Event_ChannelCheer) isEvent_Event() {}

func (*Event_ChannelRaid) isEvent_Event() {}

func (*Event_ChannelPointsCustomRewardRedemption) isEvent_Event() {}

type EventMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId           string `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	MessageType         string `protobuf:"bytes,2,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	MessageTimeStamp    string `protobuf:"bytes,3,opt,name=message_time_stamp,json=messageTimeStamp,proto3" json:"message_time_stamp,omitempty"`
	SubscriptionType    string `protobuf:"bytes,4,opt,name=subscription_type,json=subscriptionType,proto3" json:"subscription_type,omitempty"`
	SubscriptionVersion string `protobuf:"bytes,5,opt,name=subscription_version,json=subscriptionVersion,proto3" json:"subscription_version,omitempty"`
}

func (x *EventMetadata) Reset() {
	*x = EventMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_eventsub_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventMetadata) ProtoMessage() {}

func (x *EventMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_eventsub_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventMetadata.ProtoReflect.Descriptor instead.
func (*EventMetadata) Descriptor() ([]byte, []int) {
	return file_twitch_v1_eventsub_proto_rawDescGZIP(), []int{27}
}

func (x *EventMetadata) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *EventMetadata) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *EventMetadata) GetMessageTimeStamp() string {
	if x != nil {
		return x.MessageTimeStamp
	}
	return ""
}

func (x *EventMetadata) GetSubscriptionType() string {
	if x != nil {
		return x.SubscriptionType
	}
	return ""
}

func (x *EventMetadata) GetSubscriptionVersion() string {
	if x != nil {
		return x.SubscriptionVersion
	}
	return ""
}

type EventTransport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method    string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	SessionId string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *EventTransport) Reset() {
	*x = EventTransport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_eventsub_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTransport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTransport) ProtoMessage() {}

func (x *EventTransport) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_eventsub_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTransport.ProtoReflect.Descriptor instead.
func (*EventTransport) Descriptor() ([]byte, []int) {
	return file_twitch_v1_eventsub_proto_rawDescGZIP(), []int{28}
}

func (x *EventTransport) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *EventTransport) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type EventSubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status    string          `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Type      string          `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Version   string          `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Cost      uint64          `protobuf:"varint,5,opt,name=cost,proto3" json:"cost,omitempty"`
	Condition *EventCondition `protobuf:"bytes,6,opt,name=condition,proto3" json:"condition,omitempty"`
	Transport *EventTransport `protobuf:"bytes,7,opt,name=transport,proto3" json:"transport,omitempty"`
	CreatedAt string          `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *EventSubscription) Reset() {
	*x = EventSubscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_eventsub_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventSubscription) ProtoMessage() {}

func (x *EventSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_eventsub_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventSubscription.ProtoReflect.Descriptor instead.
func (*EventSubscription) Descriptor() ([]byte, []int) {
	return file_twitch_v1_eventsub_proto_rawDescGZIP(), []int{29}
}

func (x *EventSubscription) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventSubscription) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *EventSubscription) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *EventSubscription) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *EventSubscription) GetCost() uint64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *EventSubscription) GetCondition() *EventCondition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *EventSubscription) GetTransport() *EventTransport {
	if x != nil {
		return x.Transport
	}
	return nil
}

func (x *EventSubscription) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

type EventPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subscriptions *EventSubscription `protobuf:"bytes,1,opt,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	Event         *Event             `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *EventPayload) Reset() {
	*x = EventPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_eventsub_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventPayload) ProtoMessage() {}

func (x *EventPayload) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_eventsub_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventPayload.ProtoReflect.Descriptor instead.
func (*EventPayload) Descriptor() ([]byte, []int) {
	return file_twitch_v1_eventsub_proto_rawDescGZIP(), []int{30}
}

func (x *EventPayload) GetSubscriptions() *EventSubscription {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

func (x *EventPayload) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

type EventMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *EventMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Payload  *EventPayload  `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *EventMessage) Reset() {
	*x = EventMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_eventsub_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventMessage) ProtoMessage() {}

func (x *EventMessage) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_eventsub_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventMessage.ProtoReflect.Descriptor instead.
func (*EventMessage) Descriptor() ([]byte, []int) {
	return file_twitch_v1_eventsub_proto_rawDescGZIP(), []int{31}
}

func (x *EventMessage) GetMetadata() *EventMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *EventMessage) GetPayload() *EventPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type SubscribeToEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeToEventsRequest) Reset() {
	*x = SubscribeToEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_eventsub_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeToEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeToEventsRequest) ProtoMessage() {}

func (x *SubscribeToEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_eventsub_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeToEventsRequest.ProtoReflect.Descriptor instead.
func (*SubscribeToEventsRequest) Descriptor() ([]byte, []int) {
	return file_twitch_v1_eventsub_proto_rawDescGZIP(), []int{32}
}

type SubscribeToEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *EventMessage `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SubscribeToEventsResponse) Reset() {
	*x = SubscribeToEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_eventsub_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeToEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeToEventsResponse) ProtoMessage() {}

func (x *SubscribeToEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_eventsub_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeToEventsResponse.ProtoReflect.Descriptor instead.
func (*SubscribeToEventsResponse) Descriptor() ([]byte, []int) {
	return file_twitch_v1_eventsub_proto_rawDescGZIP(), []int{33}
}

func (x *SubscribeToEventsResponse) GetMessage() *EventMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

var File_twitch_v1_eventsub_proto protoreflect.FileDescriptor

var file_twitch_v1_eventsub_proto_rawDesc = []byte{
	0x0a, 0x18, 0x74, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x74, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x22, 0x4d, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3c, 0x0a, 0x0e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65,
	0x65, 0x72, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x12,
	0x0a, 0x04, 0x62, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x62, 0x69,
	0x74, 0x73, 0x22, 0x20, 0x0a, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x62, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x62, 0x69, 0x74, 0x73, 0x22, 0x71, 0x0a, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x6d, 0x6f,
	0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x47, 0x0a, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x42, 0x61, 0x64, 0x67, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x22, 0xd4, 0x01, 0x0a, 0x14, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x68, 0x65, 0x65, 0x72, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x65, 0x72, 0x6d, 0x6f, 0x74, 0x65, 0x52,
	0x09, 0x63, 0x68, 0x65, 0x65, 0x72, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x6d, 0x6f, 0x74, 0x65,
	0x52, 0x05, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x6d, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x07,
	0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb2, 0x02, 0x0a, 0x0a, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x35, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0a, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x35, 0x0a, 0x0b, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x55, 0x73, 0x65, 0x72, 0x22, 0x73, 0x0a, 0x1e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x3d, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x72,
	0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x22, 0x66, 0x0a, 0x1b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2e, 0x0a, 0x13, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa8, 0x03, 0x0a, 0x17, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x0b, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x74, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x74, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x07, 0x63, 0x68, 0x61, 0x74, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x06, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x64, 0x67, 0x65, 0x52, 0x06, 0x62, 0x61, 0x64, 0x67, 0x65,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x63, 0x68, 0x65, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x65, 0x72, 0x52, 0x05, 0x63, 0x68, 0x65, 0x65,
	0x72, 0x12, 0x44, 0x0a, 0x1f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x05, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x74, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x46,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e,
	0x0a, 0x13, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x6f, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x97, 0x01, 0x0a, 0x12, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x28, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x0b, 0x62,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0b, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x41, 0x74, 0x22, 0x49, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41,
	0x64, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2e, 0x0a, 0x13, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0xee, 0x01, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x64, 0x42, 0x72, 0x65,
	0x61, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x69, 0x63, 0x12, 0x36, 0x0a, 0x0b, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x0b, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x22, 0x4b, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a,
	0x13, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa6, 0x01,
	0x0a, 0x15, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x12, 0x36, 0x0a, 0x0b, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0b, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x65, 0x72, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x73, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x69, 0x73, 0x47, 0x69, 0x66, 0x74, 0x22, 0x52, 0x0a, 0x20, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x69, 0x66,
	0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xf8, 0x01, 0x0a, 0x1c, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x69, 0x66, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x0b, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x0b, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x69, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x75, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0f, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f,
	0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x6e, 0x6f, 0x6e,
	0x79, 0x6d, 0x6f, 0x75, 0x73, 0x22, 0x47, 0x0a, 0x15, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x43, 0x68, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e,
	0x0a, 0x13, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xc6,
	0x01, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x68, 0x65, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x79,
	0x6d, 0x6f, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x6e,
	0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x12, 0x36, 0x0a, 0x0b, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0b, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x69, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x62, 0x69, 0x74, 0x73, 0x22, 0x4b, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x61, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x33, 0x0a, 0x16, 0x74, 0x6f, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x74, 0x6f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0xaa, 0x01, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x61, 0x69, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x10, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0e, 0x74, 0x6f,
	0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0d, 0x74, 0x6f, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x65, 0x77, 0x65,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72,
	0x73, 0x22, 0x7b, 0x0a, 0x2c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x22, 0x72,
	0x0a, 0x1e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72,
	0x6f, 0x6d, 0x70, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6d,
	0x70, 0x74, 0x22, 0x98, 0x02, 0x0a, 0x28, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x36, 0x0a, 0x0b, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0b, 0x62, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x06, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x65, 0x64, 0x41, 0x74, 0x22, 0xf6, 0x05,
	0x0a, 0x0e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x5a, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x74, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4a, 0x0a, 0x0e,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x4e, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x61, 0x64, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x64, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x41, 0x64, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x12, 0x53, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x69, 0x0a,
	0x19, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x17, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x69, 0x66, 0x74, 0x12, 0x47, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x68, 0x65, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x43, 0x68, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x68, 0x65, 0x65,
	0x72, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x72, 0x61, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x61, 0x69, 0x64, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x61, 0x69, 0x64, 0x12, 0x8f, 0x01, 0x0a, 0x27, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x74, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x23, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc9, 0x05, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x56, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x74, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x68, 0x61,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x12, 0x4a, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x61, 0x64, 0x5f, 0x62,
	0x72, 0x65, 0x61, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x64,
	0x42, 0x72, 0x65, 0x61, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x64, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x12, 0x4f, 0x0a, 0x11,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x65, 0x0a,
	0x19, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x69, 0x66, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x17, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x69, 0x66, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x63, 0x68, 0x65, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43,
	0x68, 0x65, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x68, 0x65, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0c, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x72, 0x61, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x61, 0x69, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x61, 0x69, 0x64, 0x12, 0x8b, 0x01, 0x0a, 0x27,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x64,
	0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x74, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x23, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x22, 0xdf, 0x01, 0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x31, 0x0a, 0x14, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x47, 0x0a, 0x0e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x8e, 0x02,
	0x0a, 0x11, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x37, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x7a,
	0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x42,
	0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x26, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x77, 0x0a, 0x0c, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x31, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x54, 0x6f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x4e, 0x0a, 0x19, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x74, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42,
	0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6c,
	0x6c, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x74, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x2f, 0x76, 0x31, 0x3b, 0x74, 0x77, 0x69, 0x74, 0x63, 0x68, 0x76, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_twitch_v1_eventsub_proto_rawDescOnce sync.Once
	file_twitch_v1_eventsub_proto_rawDescData = file_twitch_v1_eventsub_proto_rawDesc
)

func file_twitch_v1_eventsub_proto_rawDescGZIP() []byte {
	file_twitch_v1_eventsub_proto_rawDescOnce.Do(func() {
		file_twitch_v1_eventsub_proto_rawDescData = protoimpl.X.CompressGZIP(file_twitch_v1_eventsub_proto_rawDescData)
	})
	return file_twitch_v1_eventsub_proto_rawDescData
}

var file_twitch_v1_eventsub_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_twitch_v1_eventsub_proto_goTypes = []interface{}{
	(*EventUser)(nil),                                    // 0: twitch.v1.EventUser
	(*EventCheermote)(nil),                               // 1: twitch.v1.EventCheermote
	(*EventCheer)(nil),                                   // 2: twitch.v1.EventCheer
	(*EventEmote)(nil),                                   // 3: twitch.v1.EventEmote
	(*EventBadge)(nil),                                   // 4: twitch.v1.EventBadge
	(*EventMessageFragment)(nil),                         // 5: twitch.v1.EventMessageFragment
	(*EventReply)(nil),                                   // 6: twitch.v1.EventReply
	(*ChannelChatMessageEventMessage)(nil),               // 7: twitch.v1.ChannelChatMessageEventMessage
	(*ChannelChatMessageCondition)(nil),                  // 8: twitch.v1.ChannelChatMessageCondition
	(*ChannelChatMessageEvent)(nil),                      // 9: twitch.v1.ChannelChatMessageEvent
	(*ChannelFollowCondition)(nil),                       // 10: twitch.v1.ChannelFollowCondition
	(*ChannelFollowEvent)(nil),                           // 11: twitch.v1.ChannelFollowEvent
	(*ChannelAdBreakCondition)(nil),                      // 12: twitch.v1.ChannelAdBreakCondition
	(*ChannelAdBreakEvent)(nil),                          // 13: twitch.v1.ChannelAdBreakEvent
	(*ChannelSubscribeCondition)(nil),                    // 14: twitch.v1.ChannelSubscribeCondition
	(*ChannelSubscribeEvent)(nil),                        // 15: twitch.v1.ChannelSubscribeEvent
	(*ChannelSubscriptionGiftCondition)(nil),             // 16: twitch.v1.ChannelSubscriptionGiftCondition
	(*ChannelSubscriptionGiftEvent)(nil),                 // 17: twitch.v1.ChannelSubscriptionGiftEvent
	(*ChannelCheerCondition)(nil),                        // 18: twitch.v1.ChannelCheerCondition
	(*ChannelCheerEvent)(nil),                            // 19: twitch.v1.ChannelCheerEvent
	(*ChannelRaidCondition)(nil),                         // 20: twitch.v1.ChannelRaidCondition
	(*ChannelRaidEvent)(nil),                             // 21: twitch.v1.ChannelRaidEvent
	(*ChannelPointsCustomRewardRedemptionCondition)(nil), // 22: twitch.v1.ChannelPointsCustomRewardRedemptionCondition
	(*EventChannelPointsCustomReward)(nil),               // 23: twitch.v1.EventChannelPointsCustomReward
	(*ChannelPointsCustomRewardRedemptionEvent)(nil),     // 24: twitch.v1.ChannelPointsCustomRewardRedemptionEvent
	(*EventCondition)(nil),                               // 25: twitch.v1.EventCondition
	(*Event)(nil),                                        // 26: twitch.v1.Event
	(*EventMetadata)(nil),                                // 27: twitch.v1.EventMetadata
	(*EventTransport)(nil),                               // 28: twitch.v1.EventTransport
	(*EventSubscription)(nil),                            // 29: twitch.v1.EventSubscription
	(*EventPayload)(nil),                                 // 30: twitch.v1.EventPayload
	(*EventMessage)(nil),                                 // 31: twitch.v1.EventMessage
	(*SubscribeToEventsRequest)(nil),                     // 32: twitch.v1.SubscribeToEventsRequest
	(*SubscribeToEventsResponse)(nil),                    // 33: twitch.v1.SubscribeToEventsResponse
}
var file_twitch_v1_eventsub_proto_depIdxs = []int32{
	1,  // 0: twitch.v1.EventMessageFragment.cheermote:type_name -> twitch.v1.EventCheermote
	3,  // 1: twitch.v1.EventMessageFragment.emote:type_name -> twitch.v1.EventEmote
	0,  // 2: twitch.v1.EventMessageFragment.mention:type_name -> twitch.v1.EventUser
	0,  // 3: twitch.v1.EventReply.parent_user:type_name -> twitch.v1.EventUser
	0,  // 4: twitch.v1.EventReply.thread_user:type_name -> twitch.v1.EventUser
	5,  // 5: twitch.v1.ChannelChatMessageEventMessage.fragments:type_name -> twitch.v1.EventMessageFragment
	0,  // 6: twitch.v1.ChannelChatMessageEvent.broadcaster:type_name -> twitch.v1.EventUser
	0,  // 7: twitch.v1.ChannelChatMessageEvent.chatter:type_name -> twitch.v1.EventUser
	4,  // 8: twitch.v1.ChannelChatMessageEvent.badges:type_name -> twitch.v1.EventBadge
	2,  // 9: twitch.v1.ChannelChatMessageEvent.cheer:type_name -> twitch.v1.EventCheer
	6,  // 10: twitch.v1.ChannelChatMessageEvent.reply:type_name -> twitch.v1.EventReply
	0,  // 11: twitch.v1.ChannelFollowEvent.user:type_name -> twitch.v1.EventUser
	0,  // 12: twitch.v1.ChannelFollowEvent.broadcaster:type_name -> twitch.v1.EventUser
	0,  // 13: twitch.v1.ChannelAdBreakEvent.broadcaster:type_name -> twitch.v1.EventUser
	0,  // 14: twitch.v1.ChannelAdBreakEvent.requester:type_name -> twitch.v1.EventUser
	0,  // 15: twitch.v1.ChannelSubscribeEvent.user:type_name -> twitch.v1.EventUser
	0,  // 16: twitch.v1.ChannelSubscribeEvent.broadcaster:type_name -> twitch.v1.EventUser
	0,  // 17: twitch.v1.ChannelSubscriptionGiftEvent.user:type_name -> twitch.v1.EventUser
	0,  // 18: twitch.v1.ChannelSubscriptionGiftEvent.broadcaster:type_name -> twitch.v1.EventUser
	0,  // 19: twitch.v1.ChannelCheerEvent.user:type_name -> twitch.v1.EventUser
	0,  // 20: twitch.v1.ChannelCheerEvent.broadcaster:type_name -> twitch.v1.EventUser
	0,  // 21: twitch.v1.ChannelRaidEvent.from_broadcaster:type_name -> twitch.v1.EventUser
	0,  // 22: twitch.v1.ChannelRaidEvent.to_broadcaster:type_name -> twitch.v1.EventUser
	0,  // 23: twitch.v1.ChannelPointsCustomRewardRedemptionEvent.broadcaster:type_name -> twitch.v1.EventUser
	0,  // 24: twitch.v1.ChannelPointsCustomRewardRedemptionEvent.user:type_name -> twitch.v1.EventUser
	23, // 25: twitch.v1.ChannelPointsCustomRewardRedemptionEvent.reward:type_name -> twitch.v1.EventChannelPointsCustomReward
	8,  // 26: twitch.v1.EventCondition.channel_chat_message:type_name -> twitch.v1.ChannelChatMessageCondition
	10, // 27: twitch.v1.EventCondition.channel_follow:type_name -> twitch.v1.ChannelFollowCondition
	12, // 28: twitch.v1.EventCondition.channel_ad_break:type_name -> twitch.v1.ChannelAdBreakCondition
	14, // 29: twitch.v1.EventCondition.channel_subscribe:type_name -> twitch.v1.ChannelSubscribeCondition
	16, // 30: twitch.v1.EventCondition.channel_subscription_gift:type_name -> twitch.v1.ChannelSubscriptionGiftCondition
	18, // 31: twitch.v1.EventCondition.channel_cheer:type_name -> twitch.v1.ChannelCheerCondition
	20, // 32: twitch.v1.EventCondition.channel_raid:type_name -> twitch.v1.ChannelRaidCondition
	22, // 33: twitch.v1.EventCondition.channel_points_custom_reward_redemption:type_name -> twitch.v1.ChannelPointsCustomRewardRedemptionCondition
	9,  // 34: twitch.v1.Event.channel_chat_message:type_name -> twitch.v1.ChannelChatMessageEvent
	11, // 35: twitch.v1.Event.channel_follow:type_name -> twitch.v1.ChannelFollowEvent
	13, // 36: twitch.v1.Event.channel_ad_break:type_name -> twitch.v1.ChannelAdBreakEvent
	15, // 37: twitch.v1.Event.channel_subscribe:type_name -> twitch.v1.ChannelSubscribeEvent
	17, // 38: twitch.v1.Event.channel_subscription_gift:type_name -> twitch.v1.ChannelSubscriptionGiftEvent
	19, // 39: twitch.v1.Event.channel_cheer:type_name -> twitch.v1.ChannelCheerEvent
	21, // 40: twitch.v1.Event.channel_raid:type_name -> twitch.v1.ChannelRaidEvent
	24, // 41: twitch.v1.Event.channel_points_custom_reward_redemption:type_name -> twitch.v1.ChannelPointsCustomRewardRedemptionEvent
	25, // 42: twitch.v1.EventSubscription.condition:type_name -> twitch.v1.EventCondition
	28, // 43: twitch.v1.EventSubscription.transport:type_name -> twitch.v1.EventTransport
	29, // 44: twitch.v1.EventPayload.subscriptions:type_name -> twitch.v1.EventSubscription
	26, // 45: twitch.v1.EventPayload.event:type_name -> twitch.v1.Event
	27, // 46: twitch.v1.EventMessage.metadata:type_name -> twitch.v1.EventMetadata
	30, // 47: twitch.v1.EventMessage.payload:type_name -> twitch.v1.EventPayload
	31, // 48: twitch.v1.SubscribeToEventsResponse.message:type_name -> twitch.v1.EventMessage
	49, // [49:49] is the sub-list for method output_type
	49, // [49:49] is the sub-list for method input_type
	49, // [49:49] is the sub-list for extension type_name
	49, // [49:49] is the sub-list for extension extendee
	0,  // [0:49] is the sub-list for field type_name
}

func init() { file_twitch_v1_eventsub_proto_init() }
func file_twitch_v1_eventsub_proto_init() {
	if File_twitch_v1_eventsub_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_twitch_v1_eventsub_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_eventsub_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventCheermote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_eventsub_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventCheer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_eventsub_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventEmote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_eventsub_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventBadge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_eventsub_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventMessageFragment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_eventsub_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_eventsub_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelChatMessageEventMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_eventsub_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelChatMessageCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_eventsub_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelChatMessageEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_eventsub_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelFollowCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_eventsub_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelFollowEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_eventsub_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelAdBreakCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_eventsub_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelAdBreakEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_eventsub_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelSubscribeCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_eventsub_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelSubscribeEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_eventsub_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelSubscriptionGiftCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_eventsub_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelSubscriptionGiftEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_eventsub_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelCheerCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_eventsub_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelCheerEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_eventsub_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelRaidCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_eventsub_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelRaidEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_eventsub_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelPointsCustomRewardRedemptionCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_eventsub_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventChannelPointsCustomReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_eventsub_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelPointsCustomRewardRedemptionEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_eventsub_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_eventsub_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_eventsub_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_eventsub_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTransport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_eventsub_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventSubscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_eventsub_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_eventsub_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_eventsub_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeToEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_eventsub_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeToEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_twitch_v1_eventsub_proto_msgTypes[25].OneofWrappers = []interface{}{
		(*EventCondition_ChannelChatMessage)(nil),
		(*EventCondition_ChannelFollow)(nil),
		(*EventCondition_ChannelAdBreak)(nil),
		(*EventCondition_ChannelSubscribe)(nil),
		(*EventCondition_ChannelSubscriptionGift)(nil),
		(*EventCondition_ChannelCheer)(nil),
		(*EventCondition_ChannelRaid)(nil),
		(*EventCondition_ChannelPointsCustomRewardRedemption)(nil),
	}
	file_twitch_v1_eventsub_proto_msgTypes[26].OneofWrappers = []interface{}{
		(*Event_ChannelChatMessage)(nil),
		(*Event_ChannelFollow)(nil),
		(*Event_ChannelAdBreak)(nil),
		(*Event_ChannelSubscribe)(nil),
		(*Event_ChannelSubscriptionGift)(nil),
		(*Event_ChannelCheer)(nil),
		(*Event_ChannelRaid)(nil),
		(*Event_ChannelPointsCustomRewardRedemption)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_twitch_v1_eventsub_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_twitch_v1_eventsub_proto_goTypes,
		DependencyIndexes: file_twitch_v1_eventsub_proto_depIdxs,
		MessageInfos:      file_twitch_v1_eventsub_proto_msgTypes,
	}.Build()
	File_twitch_v1_eventsub_proto = out.File
	file_twitch_v1_eventsub_proto_rawDesc = nil
	file_twitch_v1_eventsub_proto_goTypes = nil
	file_twitch_v1_eventsub_proto_depIdxs = nil
}
