// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: twitch/v1/helix.proto

package twitchv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SendChatMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcasterId        string `protobuf:"bytes,1,opt,name=broadcaster_id,json=broadcasterId,proto3" json:"broadcaster_id,omitempty"`
	SenderId             string `protobuf:"bytes,2,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	Message              string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	ReplyParentMessageId string `protobuf:"bytes,4,opt,name=reply_parent_message_id,json=replyParentMessageId,proto3" json:"reply_parent_message_id,omitempty"`
}

func (x *SendChatMessageRequest) Reset() {
	*x = SendChatMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_helix_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendChatMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendChatMessageRequest) ProtoMessage() {}

func (x *SendChatMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_helix_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendChatMessageRequest.ProtoReflect.Descriptor instead.
func (*SendChatMessageRequest) Descriptor() ([]byte, []int) {
	return file_twitch_v1_helix_proto_rawDescGZIP(), []int{0}
}

func (x *SendChatMessageRequest) GetBroadcasterId() string {
	if x != nil {
		return x.BroadcasterId
	}
	return ""
}

func (x *SendChatMessageRequest) GetSenderId() string {
	if x != nil {
		return x.SenderId
	}
	return ""
}

func (x *SendChatMessageRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SendChatMessageRequest) GetReplyParentMessageId() string {
	if x != nil {
		return x.ReplyParentMessageId
	}
	return ""
}

type SendChatMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId string `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	IsSent    bool   `protobuf:"varint,2,opt,name=is_sent,json=isSent,proto3" json:"is_sent,omitempty"`
}

func (x *SendChatMessageResponse) Reset() {
	*x = SendChatMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_helix_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendChatMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendChatMessageResponse) ProtoMessage() {}

func (x *SendChatMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_helix_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendChatMessageResponse.ProtoReflect.Descriptor instead.
func (*SendChatMessageResponse) Descriptor() ([]byte, []int) {
	return file_twitch_v1_helix_proto_rawDescGZIP(), []int{1}
}

func (x *SendChatMessageResponse) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *SendChatMessageResponse) GetIsSent() bool {
	if x != nil {
		return x.IsSent
	}
	return false
}

type GetUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to User:
	//
	//	*GetUsersRequest_Id
	//	*GetUsersRequest_Login
	User isGetUsersRequest_User `protobuf_oneof:"user"`
}

func (x *GetUsersRequest) Reset() {
	*x = GetUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_helix_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUsersRequest) ProtoMessage() {}

func (x *GetUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_helix_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUsersRequest.ProtoReflect.Descriptor instead.
func (*GetUsersRequest) Descriptor() ([]byte, []int) {
	return file_twitch_v1_helix_proto_rawDescGZIP(), []int{2}
}

func (m *GetUsersRequest) GetUser() isGetUsersRequest_User {
	if m != nil {
		return m.User
	}
	return nil
}

func (x *GetUsersRequest) GetId() string {
	if x, ok := x.GetUser().(*GetUsersRequest_Id); ok {
		return x.Id
	}
	return ""
}

func (x *GetUsersRequest) GetLogin() string {
	if x, ok := x.GetUser().(*GetUsersRequest_Login); ok {
		return x.Login
	}
	return ""
}

type isGetUsersRequest_User interface {
	isGetUsersRequest_User()
}

type GetUsersRequest_Id struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type GetUsersRequest_Login struct {
	Login string `protobuf:"bytes,2,opt,name=login,proto3,oneof"`
}

func (*GetUsersRequest_Id) isGetUsersRequest_User() {}

func (*GetUsersRequest_Login) isGetUsersRequest_User() {}

type GetUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Login           string `protobuf:"bytes,2,opt,name=login,proto3" json:"login,omitempty"`
	DisplayName     string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	UserType        string `protobuf:"bytes,4,opt,name=user_type,json=userType,proto3" json:"user_type,omitempty"`
	BroadcasterType string `protobuf:"bytes,5,opt,name=broadcaster_type,json=broadcasterType,proto3" json:"broadcaster_type,omitempty"`
	Description     string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	ProfileImageUrl string `protobuf:"bytes,7,opt,name=profile_image_url,json=profileImageUrl,proto3" json:"profile_image_url,omitempty"`
	OfflineImageUrl string `protobuf:"bytes,8,opt,name=offline_image_url,json=offlineImageUrl,proto3" json:"offline_image_url,omitempty"`
	ViewCount       uint64 `protobuf:"varint,9,opt,name=view_count,json=viewCount,proto3" json:"view_count,omitempty"`
	Email           string `protobuf:"bytes,10,opt,name=email,proto3" json:"email,omitempty"`
	CreatedAt       string `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *GetUsersResponse) Reset() {
	*x = GetUsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_helix_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUsersResponse) ProtoMessage() {}

func (x *GetUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_helix_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUsersResponse.ProtoReflect.Descriptor instead.
func (*GetUsersResponse) Descriptor() ([]byte, []int) {
	return file_twitch_v1_helix_proto_rawDescGZIP(), []int{3}
}

func (x *GetUsersResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetUsersResponse) GetLogin() string {
	if x != nil {
		return x.Login
	}
	return ""
}

func (x *GetUsersResponse) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *GetUsersResponse) GetUserType() string {
	if x != nil {
		return x.UserType
	}
	return ""
}

func (x *GetUsersResponse) GetBroadcasterType() string {
	if x != nil {
		return x.BroadcasterType
	}
	return ""
}

func (x *GetUsersResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GetUsersResponse) GetProfileImageUrl() string {
	if x != nil {
		return x.ProfileImageUrl
	}
	return ""
}

func (x *GetUsersResponse) GetOfflineImageUrl() string {
	if x != nil {
		return x.OfflineImageUrl
	}
	return ""
}

func (x *GetUsersResponse) GetViewCount() uint64 {
	if x != nil {
		return x.ViewCount
	}
	return 0
}

func (x *GetUsersResponse) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *GetUsersResponse) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

type GetChannelInformationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcasterId string `protobuf:"bytes,1,opt,name=broadcaster_id,json=broadcasterId,proto3" json:"broadcaster_id,omitempty"`
}

func (x *GetChannelInformationRequest) Reset() {
	*x = GetChannelInformationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_helix_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelInformationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelInformationRequest) ProtoMessage() {}

func (x *GetChannelInformationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_helix_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelInformationRequest.ProtoReflect.Descriptor instead.
func (*GetChannelInformationRequest) Descriptor() ([]byte, []int) {
	return file_twitch_v1_helix_proto_rawDescGZIP(), []int{4}
}

func (x *GetChannelInformationRequest) GetBroadcasterId() string {
	if x != nil {
		return x.BroadcasterId
	}
	return ""
}

type GetChannelInformationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcasterId               string   `protobuf:"bytes,1,opt,name=broadcaster_id,json=broadcasterId,proto3" json:"broadcaster_id,omitempty"`
	BroadcasterLogin            string   `protobuf:"bytes,2,opt,name=broadcaster_login,json=broadcasterLogin,proto3" json:"broadcaster_login,omitempty"`
	BroadcasterName             string   `protobuf:"bytes,3,opt,name=broadcaster_name,json=broadcasterName,proto3" json:"broadcaster_name,omitempty"`
	BroadcasterLanguage         string   `protobuf:"bytes,4,opt,name=broadcaster_language,json=broadcasterLanguage,proto3" json:"broadcaster_language,omitempty"`
	GameId                      string   `protobuf:"bytes,5,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	GameName                    string   `protobuf:"bytes,6,opt,name=game_name,json=gameName,proto3" json:"game_name,omitempty"`
	Title                       string   `protobuf:"bytes,7,opt,name=title,proto3" json:"title,omitempty"`
	Delay                       uint32   `protobuf:"varint,8,opt,name=delay,proto3" json:"delay,omitempty"`
	Tags                        []string `protobuf:"bytes,9,rep,name=tags,proto3" json:"tags,omitempty"`
	ContentClassificationLabels []string `protobuf:"bytes,10,rep,name=content_classification_labels,json=contentClassificationLabels,proto3" json:"content_classification_labels,omitempty"`
	IsBrandedContent            bool     `protobuf:"varint,11,opt,name=is_branded_content,json=isBrandedContent,proto3" json:"is_branded_content,omitempty"`
}

func (x *GetChannelInformationResponse) Reset() {
	*x = GetChannelInformationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_helix_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelInformationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelInformationResponse) ProtoMessage() {}

func (x *GetChannelInformationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_helix_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelInformationResponse.ProtoReflect.Descriptor instead.
func (*GetChannelInformationResponse) Descriptor() ([]byte, []int) {
	return file_twitch_v1_helix_proto_rawDescGZIP(), []int{5}
}

func (x *GetChannelInformationResponse) GetBroadcasterId() string {
	if x != nil {
		return x.BroadcasterId
	}
	return ""
}

func (x *GetChannelInformationResponse) GetBroadcasterLogin() string {
	if x != nil {
		return x.BroadcasterLogin
	}
	return ""
}

func (x *GetChannelInformationResponse) GetBroadcasterName() string {
	if x != nil {
		return x.BroadcasterName
	}
	return ""
}

func (x *GetChannelInformationResponse) GetBroadcasterLanguage() string {
	if x != nil {
		return x.BroadcasterLanguage
	}
	return ""
}

func (x *GetChannelInformationResponse) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *GetChannelInformationResponse) GetGameName() string {
	if x != nil {
		return x.GameName
	}
	return ""
}

func (x *GetChannelInformationResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GetChannelInformationResponse) GetDelay() uint32 {
	if x != nil {
		return x.Delay
	}
	return 0
}

func (x *GetChannelInformationResponse) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *GetChannelInformationResponse) GetContentClassificationLabels() []string {
	if x != nil {
		return x.ContentClassificationLabels
	}
	return nil
}

func (x *GetChannelInformationResponse) GetIsBrandedContent() bool {
	if x != nil {
		return x.IsBrandedContent
	}
	return false
}

type CreateCustomRewardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Cost  uint64 `protobuf:"varint,2,opt,name=cost,proto3" json:"cost,omitempty"`
}

func (x *CreateCustomRewardRequest) Reset() {
	*x = CreateCustomRewardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_helix_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCustomRewardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCustomRewardRequest) ProtoMessage() {}

func (x *CreateCustomRewardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_helix_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCustomRewardRequest.ProtoReflect.Descriptor instead.
func (*CreateCustomRewardRequest) Descriptor() ([]byte, []int) {
	return file_twitch_v1_helix_proto_rawDescGZIP(), []int{6}
}

func (x *CreateCustomRewardRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateCustomRewardRequest) GetCost() uint64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

type MaxPerStreamSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsEnabled    bool   `protobuf:"varint,1,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	MaxPerStream uint32 `protobuf:"varint,2,opt,name=max_per_stream,json=maxPerStream,proto3" json:"max_per_stream,omitempty"`
}

func (x *MaxPerStreamSetting) Reset() {
	*x = MaxPerStreamSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_helix_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxPerStreamSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxPerStreamSetting) ProtoMessage() {}

func (x *MaxPerStreamSetting) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_helix_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxPerStreamSetting.ProtoReflect.Descriptor instead.
func (*MaxPerStreamSetting) Descriptor() ([]byte, []int) {
	return file_twitch_v1_helix_proto_rawDescGZIP(), []int{7}
}

func (x *MaxPerStreamSetting) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *MaxPerStreamSetting) GetMaxPerStream() uint32 {
	if x != nil {
		return x.MaxPerStream
	}
	return 0
}

type MaxPerUserPerStreamSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsEnabled           bool   `protobuf:"varint,1,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	MaxPerUserPerStream uint32 `protobuf:"varint,2,opt,name=max_per_user_per_stream,json=maxPerUserPerStream,proto3" json:"max_per_user_per_stream,omitempty"`
}

func (x *MaxPerUserPerStreamSetting) Reset() {
	*x = MaxPerUserPerStreamSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_helix_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxPerUserPerStreamSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxPerUserPerStreamSetting) ProtoMessage() {}

func (x *MaxPerUserPerStreamSetting) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_helix_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxPerUserPerStreamSetting.ProtoReflect.Descriptor instead.
func (*MaxPerUserPerStreamSetting) Descriptor() ([]byte, []int) {
	return file_twitch_v1_helix_proto_rawDescGZIP(), []int{8}
}

func (x *MaxPerUserPerStreamSetting) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *MaxPerUserPerStreamSetting) GetMaxPerUserPerStream() uint32 {
	if x != nil {
		return x.MaxPerUserPerStream
	}
	return 0
}

type GlobalCooldownSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsEnabled             bool   `protobuf:"varint,1,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	GlobalCooldownSeconds uint32 `protobuf:"varint,2,opt,name=global_cooldown_seconds,json=globalCooldownSeconds,proto3" json:"global_cooldown_seconds,omitempty"`
}

func (x *GlobalCooldownSetting) Reset() {
	*x = GlobalCooldownSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_helix_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalCooldownSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalCooldownSetting) ProtoMessage() {}

func (x *GlobalCooldownSetting) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_helix_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalCooldownSetting.ProtoReflect.Descriptor instead.
func (*GlobalCooldownSetting) Descriptor() ([]byte, []int) {
	return file_twitch_v1_helix_proto_rawDescGZIP(), []int{9}
}

func (x *GlobalCooldownSetting) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *GlobalCooldownSetting) GetGlobalCooldownSeconds() uint32 {
	if x != nil {
		return x.GlobalCooldownSeconds
	}
	return 0
}

type DefaultImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url_1X string `protobuf:"bytes,1,opt,name=url_1x,json=url1x,proto3" json:"url_1x,omitempty"`
	Url_2X string `protobuf:"bytes,2,opt,name=url_2x,json=url2x,proto3" json:"url_2x,omitempty"`
	Url_4X string `protobuf:"bytes,3,opt,name=url_4x,json=url4x,proto3" json:"url_4x,omitempty"`
}

func (x *DefaultImage) Reset() {
	*x = DefaultImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_helix_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultImage) ProtoMessage() {}

func (x *DefaultImage) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_helix_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultImage.ProtoReflect.Descriptor instead.
func (*DefaultImage) Descriptor() ([]byte, []int) {
	return file_twitch_v1_helix_proto_rawDescGZIP(), []int{10}
}

func (x *DefaultImage) GetUrl_1X() string {
	if x != nil {
		return x.Url_1X
	}
	return ""
}

func (x *DefaultImage) GetUrl_2X() string {
	if x != nil {
		return x.Url_2X
	}
	return ""
}

func (x *DefaultImage) GetUrl_4X() string {
	if x != nil {
		return x.Url_4X
	}
	return ""
}

type CustomRewardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcasterName                   string                      `protobuf:"bytes,1,opt,name=broadcaster_name,json=broadcasterName,proto3" json:"broadcaster_name,omitempty"`
	BroadcasterLogin                  string                      `protobuf:"bytes,2,opt,name=broadcaster_login,json=broadcasterLogin,proto3" json:"broadcaster_login,omitempty"`
	BroadcasterId                     string                      `protobuf:"bytes,3,opt,name=broadcaster_id,json=broadcasterId,proto3" json:"broadcaster_id,omitempty"`
	Id                                string                      `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	Image                             string                      `protobuf:"bytes,5,opt,name=image,proto3" json:"image,omitempty"`
	BackgroundColor                   string                      `protobuf:"bytes,6,opt,name=background_color,json=backgroundColor,proto3" json:"background_color,omitempty"`
	IsEnabled                         bool                        `protobuf:"varint,7,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	Cost                              uint32                      `protobuf:"varint,8,opt,name=cost,proto3" json:"cost,omitempty"`
	Title                             string                      `protobuf:"bytes,9,opt,name=title,proto3" json:"title,omitempty"`
	Prompt                            string                      `protobuf:"bytes,10,opt,name=prompt,proto3" json:"prompt,omitempty"`
	IsUserInputRequired               bool                        `protobuf:"varint,11,opt,name=is_user_input_required,json=isUserInputRequired,proto3" json:"is_user_input_required,omitempty"`
	MaxPerStreamSetting               *MaxPerStreamSetting        `protobuf:"bytes,12,opt,name=max_per_stream_setting,json=maxPerStreamSetting,proto3" json:"max_per_stream_setting,omitempty"`
	MaxPerUserPerStreamSetting        *MaxPerUserPerStreamSetting `protobuf:"bytes,13,opt,name=max_per_user_per_stream_setting,json=maxPerUserPerStreamSetting,proto3" json:"max_per_user_per_stream_setting,omitempty"`
	GlobalCooldownSetting             *GlobalCooldownSetting      `protobuf:"bytes,14,opt,name=global_cooldown_setting,json=globalCooldownSetting,proto3" json:"global_cooldown_setting,omitempty"`
	IsPaused                          bool                        `protobuf:"varint,15,opt,name=is_paused,json=isPaused,proto3" json:"is_paused,omitempty"`
	IsInStock                         bool                        `protobuf:"varint,16,opt,name=is_in_stock,json=isInStock,proto3" json:"is_in_stock,omitempty"`
	DefaultImage                      *DefaultImage               `protobuf:"bytes,17,opt,name=default_image,json=defaultImage,proto3" json:"default_image,omitempty"`
	ShouldRedemptionsSkipRequestQueue bool                        `protobuf:"varint,18,opt,name=should_redemptions_skip_request_queue,json=shouldRedemptionsSkipRequestQueue,proto3" json:"should_redemptions_skip_request_queue,omitempty"`
	RedemptionsRedeemedCurrentStream  string                      `protobuf:"bytes,19,opt,name=redemptions_redeemed_current_stream,json=redemptionsRedeemedCurrentStream,proto3" json:"redemptions_redeemed_current_stream,omitempty"`
	CooldownExpiresAt                 string                      `protobuf:"bytes,20,opt,name=cooldown_expires_at,json=cooldownExpiresAt,proto3" json:"cooldown_expires_at,omitempty"`
}

func (x *CustomRewardResponse) Reset() {
	*x = CustomRewardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_helix_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomRewardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomRewardResponse) ProtoMessage() {}

func (x *CustomRewardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_helix_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomRewardResponse.ProtoReflect.Descriptor instead.
func (*CustomRewardResponse) Descriptor() ([]byte, []int) {
	return file_twitch_v1_helix_proto_rawDescGZIP(), []int{11}
}

func (x *CustomRewardResponse) GetBroadcasterName() string {
	if x != nil {
		return x.BroadcasterName
	}
	return ""
}

func (x *CustomRewardResponse) GetBroadcasterLogin() string {
	if x != nil {
		return x.BroadcasterLogin
	}
	return ""
}

func (x *CustomRewardResponse) GetBroadcasterId() string {
	if x != nil {
		return x.BroadcasterId
	}
	return ""
}

func (x *CustomRewardResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CustomRewardResponse) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *CustomRewardResponse) GetBackgroundColor() string {
	if x != nil {
		return x.BackgroundColor
	}
	return ""
}

func (x *CustomRewardResponse) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *CustomRewardResponse) GetCost() uint32 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *CustomRewardResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CustomRewardResponse) GetPrompt() string {
	if x != nil {
		return x.Prompt
	}
	return ""
}

func (x *CustomRewardResponse) GetIsUserInputRequired() bool {
	if x != nil {
		return x.IsUserInputRequired
	}
	return false
}

func (x *CustomRewardResponse) GetMaxPerStreamSetting() *MaxPerStreamSetting {
	if x != nil {
		return x.MaxPerStreamSetting
	}
	return nil
}

func (x *CustomRewardResponse) GetMaxPerUserPerStreamSetting() *MaxPerUserPerStreamSetting {
	if x != nil {
		return x.MaxPerUserPerStreamSetting
	}
	return nil
}

func (x *CustomRewardResponse) GetGlobalCooldownSetting() *GlobalCooldownSetting {
	if x != nil {
		return x.GlobalCooldownSetting
	}
	return nil
}

func (x *CustomRewardResponse) GetIsPaused() bool {
	if x != nil {
		return x.IsPaused
	}
	return false
}

func (x *CustomRewardResponse) GetIsInStock() bool {
	if x != nil {
		return x.IsInStock
	}
	return false
}

func (x *CustomRewardResponse) GetDefaultImage() *DefaultImage {
	if x != nil {
		return x.DefaultImage
	}
	return nil
}

func (x *CustomRewardResponse) GetShouldRedemptionsSkipRequestQueue() bool {
	if x != nil {
		return x.ShouldRedemptionsSkipRequestQueue
	}
	return false
}

func (x *CustomRewardResponse) GetRedemptionsRedeemedCurrentStream() string {
	if x != nil {
		return x.RedemptionsRedeemedCurrentStream
	}
	return ""
}

func (x *CustomRewardResponse) GetCooldownExpiresAt() string {
	if x != nil {
		return x.CooldownExpiresAt
	}
	return ""
}

type CreateCustomRewardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reward *CustomRewardResponse `protobuf:"bytes,1,opt,name=reward,proto3" json:"reward,omitempty"`
}

func (x *CreateCustomRewardResponse) Reset() {
	*x = CreateCustomRewardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_helix_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCustomRewardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCustomRewardResponse) ProtoMessage() {}

func (x *CreateCustomRewardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_helix_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCustomRewardResponse.ProtoReflect.Descriptor instead.
func (*CreateCustomRewardResponse) Descriptor() ([]byte, []int) {
	return file_twitch_v1_helix_proto_rawDescGZIP(), []int{12}
}

func (x *CreateCustomRewardResponse) GetReward() *CustomRewardResponse {
	if x != nil {
		return x.Reward
	}
	return nil
}

type GetCustomRewardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcasterId string `protobuf:"bytes,1,opt,name=broadcaster_id,json=broadcasterId,proto3" json:"broadcaster_id,omitempty"`
}

func (x *GetCustomRewardsRequest) Reset() {
	*x = GetCustomRewardsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_helix_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomRewardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomRewardsRequest) ProtoMessage() {}

func (x *GetCustomRewardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_helix_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomRewardsRequest.ProtoReflect.Descriptor instead.
func (*GetCustomRewardsRequest) Descriptor() ([]byte, []int) {
	return file_twitch_v1_helix_proto_rawDescGZIP(), []int{13}
}

func (x *GetCustomRewardsRequest) GetBroadcasterId() string {
	if x != nil {
		return x.BroadcasterId
	}
	return ""
}

type GetCustomRewardsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rewards []*CustomRewardResponse `protobuf:"bytes,1,rep,name=rewards,proto3" json:"rewards,omitempty"`
}

func (x *GetCustomRewardsResponse) Reset() {
	*x = GetCustomRewardsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_helix_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomRewardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomRewardsResponse) ProtoMessage() {}

func (x *GetCustomRewardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_helix_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomRewardsResponse.ProtoReflect.Descriptor instead.
func (*GetCustomRewardsResponse) Descriptor() ([]byte, []int) {
	return file_twitch_v1_helix_proto_rawDescGZIP(), []int{14}
}

func (x *GetCustomRewardsResponse) GetRewards() []*CustomRewardResponse {
	if x != nil {
		return x.Rewards
	}
	return nil
}

type UpdateCustomRewardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title                             *string `protobuf:"bytes,1,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Prompt                            *string `protobuf:"bytes,2,opt,name=prompt,proto3,oneof" json:"prompt,omitempty"`
	Cost                              *uint64 `protobuf:"varint,3,opt,name=cost,proto3,oneof" json:"cost,omitempty"`
	BackgroundColor                   *string `protobuf:"bytes,4,opt,name=background_color,json=backgroundColor,proto3,oneof" json:"background_color,omitempty"`
	IsEnabled                         *bool   `protobuf:"varint,5,opt,name=is_enabled,json=isEnabled,proto3,oneof" json:"is_enabled,omitempty"`
	IsUserInputRequired               *bool   `protobuf:"varint,6,opt,name=is_user_input_required,json=isUserInputRequired,proto3,oneof" json:"is_user_input_required,omitempty"`
	IsMaxPerStreamEnabled             *bool   `protobuf:"varint,7,opt,name=is_max_per_stream_enabled,json=isMaxPerStreamEnabled,proto3,oneof" json:"is_max_per_stream_enabled,omitempty"`
	MaxPerStream                      *uint64 `protobuf:"varint,8,opt,name=max_per_stream,json=maxPerStream,proto3,oneof" json:"max_per_stream,omitempty"`
	IsMaxPerUserPerStreamEnabled      *bool   `protobuf:"varint,9,opt,name=is_max_per_user_per_stream_enabled,json=isMaxPerUserPerStreamEnabled,proto3,oneof" json:"is_max_per_user_per_stream_enabled,omitempty"`
	MaxPerUserPerStream               *uint64 `protobuf:"varint,10,opt,name=max_per_user_per_stream,json=maxPerUserPerStream,proto3,oneof" json:"max_per_user_per_stream,omitempty"`
	IsGlobalCooldownEnabled           *bool   `protobuf:"varint,11,opt,name=is_global_cooldown_enabled,json=isGlobalCooldownEnabled,proto3,oneof" json:"is_global_cooldown_enabled,omitempty"`
	GlobalCooldownSeconds             *uint64 `protobuf:"varint,12,opt,name=global_cooldown_seconds,json=globalCooldownSeconds,proto3,oneof" json:"global_cooldown_seconds,omitempty"`
	IsPaused                          *bool   `protobuf:"varint,13,opt,name=is_paused,json=isPaused,proto3,oneof" json:"is_paused,omitempty"`
	ShouldRedemptionsSkipRequestQueue *bool   `protobuf:"varint,14,opt,name=should_redemptions_skip_request_queue,json=shouldRedemptionsSkipRequestQueue,proto3,oneof" json:"should_redemptions_skip_request_queue,omitempty"`
	BroadcasterId                     string  `protobuf:"bytes,15,opt,name=broadcaster_id,json=broadcasterId,proto3" json:"broadcaster_id,omitempty"`
	Id                                string  `protobuf:"bytes,16,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UpdateCustomRewardRequest) Reset() {
	*x = UpdateCustomRewardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_helix_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCustomRewardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCustomRewardRequest) ProtoMessage() {}

func (x *UpdateCustomRewardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_helix_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCustomRewardRequest.ProtoReflect.Descriptor instead.
func (*UpdateCustomRewardRequest) Descriptor() ([]byte, []int) {
	return file_twitch_v1_helix_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateCustomRewardRequest) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *UpdateCustomRewardRequest) GetPrompt() string {
	if x != nil && x.Prompt != nil {
		return *x.Prompt
	}
	return ""
}

func (x *UpdateCustomRewardRequest) GetCost() uint64 {
	if x != nil && x.Cost != nil {
		return *x.Cost
	}
	return 0
}

func (x *UpdateCustomRewardRequest) GetBackgroundColor() string {
	if x != nil && x.BackgroundColor != nil {
		return *x.BackgroundColor
	}
	return ""
}

func (x *UpdateCustomRewardRequest) GetIsEnabled() bool {
	if x != nil && x.IsEnabled != nil {
		return *x.IsEnabled
	}
	return false
}

func (x *UpdateCustomRewardRequest) GetIsUserInputRequired() bool {
	if x != nil && x.IsUserInputRequired != nil {
		return *x.IsUserInputRequired
	}
	return false
}

func (x *UpdateCustomRewardRequest) GetIsMaxPerStreamEnabled() bool {
	if x != nil && x.IsMaxPerStreamEnabled != nil {
		return *x.IsMaxPerStreamEnabled
	}
	return false
}

func (x *UpdateCustomRewardRequest) GetMaxPerStream() uint64 {
	if x != nil && x.MaxPerStream != nil {
		return *x.MaxPerStream
	}
	return 0
}

func (x *UpdateCustomRewardRequest) GetIsMaxPerUserPerStreamEnabled() bool {
	if x != nil && x.IsMaxPerUserPerStreamEnabled != nil {
		return *x.IsMaxPerUserPerStreamEnabled
	}
	return false
}

func (x *UpdateCustomRewardRequest) GetMaxPerUserPerStream() uint64 {
	if x != nil && x.MaxPerUserPerStream != nil {
		return *x.MaxPerUserPerStream
	}
	return 0
}

func (x *UpdateCustomRewardRequest) GetIsGlobalCooldownEnabled() bool {
	if x != nil && x.IsGlobalCooldownEnabled != nil {
		return *x.IsGlobalCooldownEnabled
	}
	return false
}

func (x *UpdateCustomRewardRequest) GetGlobalCooldownSeconds() uint64 {
	if x != nil && x.GlobalCooldownSeconds != nil {
		return *x.GlobalCooldownSeconds
	}
	return 0
}

func (x *UpdateCustomRewardRequest) GetIsPaused() bool {
	if x != nil && x.IsPaused != nil {
		return *x.IsPaused
	}
	return false
}

func (x *UpdateCustomRewardRequest) GetShouldRedemptionsSkipRequestQueue() bool {
	if x != nil && x.ShouldRedemptionsSkipRequestQueue != nil {
		return *x.ShouldRedemptionsSkipRequestQueue
	}
	return false
}

func (x *UpdateCustomRewardRequest) GetBroadcasterId() string {
	if x != nil {
		return x.BroadcasterId
	}
	return ""
}

func (x *UpdateCustomRewardRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UpdateCustomRewardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reward *CustomRewardResponse `protobuf:"bytes,1,opt,name=reward,proto3" json:"reward,omitempty"`
}

func (x *UpdateCustomRewardResponse) Reset() {
	*x = UpdateCustomRewardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_helix_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCustomRewardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCustomRewardResponse) ProtoMessage() {}

func (x *UpdateCustomRewardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_helix_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCustomRewardResponse.ProtoReflect.Descriptor instead.
func (*UpdateCustomRewardResponse) Descriptor() ([]byte, []int) {
	return file_twitch_v1_helix_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateCustomRewardResponse) GetReward() *CustomRewardResponse {
	if x != nil {
		return x.Reward
	}
	return nil
}

type DeleteCustomRewardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcasterUserId string `protobuf:"bytes,1,opt,name=broadcaster_user_id,json=broadcasterUserId,proto3" json:"broadcaster_user_id,omitempty"`
	Id                string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteCustomRewardRequest) Reset() {
	*x = DeleteCustomRewardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_helix_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCustomRewardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCustomRewardRequest) ProtoMessage() {}

func (x *DeleteCustomRewardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_helix_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCustomRewardRequest.ProtoReflect.Descriptor instead.
func (*DeleteCustomRewardRequest) Descriptor() ([]byte, []int) {
	return file_twitch_v1_helix_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteCustomRewardRequest) GetBroadcasterUserId() string {
	if x != nil {
		return x.BroadcasterUserId
	}
	return ""
}

func (x *DeleteCustomRewardRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteCustomRewardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteCustomRewardResponse) Reset() {
	*x = DeleteCustomRewardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_helix_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCustomRewardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCustomRewardResponse) ProtoMessage() {}

func (x *DeleteCustomRewardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_helix_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCustomRewardResponse.ProtoReflect.Descriptor instead.
func (*DeleteCustomRewardResponse) Descriptor() ([]byte, []int) {
	return file_twitch_v1_helix_proto_rawDescGZIP(), []int{18}
}

type UpdateRedemptionStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BroadcasterId string `protobuf:"bytes,2,opt,name=broadcaster_id,json=broadcasterId,proto3" json:"broadcaster_id,omitempty"`
	RewardId      string `protobuf:"bytes,3,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
	Status        string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UpdateRedemptionStatusRequest) Reset() {
	*x = UpdateRedemptionStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_helix_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRedemptionStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRedemptionStatusRequest) ProtoMessage() {}

func (x *UpdateRedemptionStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_helix_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRedemptionStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateRedemptionStatusRequest) Descriptor() ([]byte, []int) {
	return file_twitch_v1_helix_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateRedemptionStatusRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateRedemptionStatusRequest) GetBroadcasterId() string {
	if x != nil {
		return x.BroadcasterId
	}
	return ""
}

func (x *UpdateRedemptionStatusRequest) GetRewardId() string {
	if x != nil {
		return x.RewardId
	}
	return ""
}

func (x *UpdateRedemptionStatusRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type UpdateRedemptionStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateRedemptionStatusResponse) Reset() {
	*x = UpdateRedemptionStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_helix_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRedemptionStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRedemptionStatusResponse) ProtoMessage() {}

func (x *UpdateRedemptionStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_helix_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRedemptionStatusResponse.ProtoReflect.Descriptor instead.
func (*UpdateRedemptionStatusResponse) Descriptor() ([]byte, []int) {
	return file_twitch_v1_helix_proto_rawDescGZIP(), []int{20}
}

type SendShoutoutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromBroadcasterId string `protobuf:"bytes,1,opt,name=from_broadcaster_id,json=fromBroadcasterId,proto3" json:"from_broadcaster_id,omitempty"`
	ToBroadcasterId   string `protobuf:"bytes,2,opt,name=to_broadcaster_id,json=toBroadcasterId,proto3" json:"to_broadcaster_id,omitempty"`
	ModeratorId       string `protobuf:"bytes,3,opt,name=moderator_id,json=moderatorId,proto3" json:"moderator_id,omitempty"`
}

func (x *SendShoutoutRequest) Reset() {
	*x = SendShoutoutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_helix_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendShoutoutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendShoutoutRequest) ProtoMessage() {}

func (x *SendShoutoutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_helix_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendShoutoutRequest.ProtoReflect.Descriptor instead.
func (*SendShoutoutRequest) Descriptor() ([]byte, []int) {
	return file_twitch_v1_helix_proto_rawDescGZIP(), []int{21}
}

func (x *SendShoutoutRequest) GetFromBroadcasterId() string {
	if x != nil {
		return x.FromBroadcasterId
	}
	return ""
}

func (x *SendShoutoutRequest) GetToBroadcasterId() string {
	if x != nil {
		return x.ToBroadcasterId
	}
	return ""
}

func (x *SendShoutoutRequest) GetModeratorId() string {
	if x != nil {
		return x.ModeratorId
	}
	return ""
}

type SendShoutoutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SendShoutoutResponse) Reset() {
	*x = SendShoutoutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_helix_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendShoutoutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendShoutoutResponse) ProtoMessage() {}

func (x *SendShoutoutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_helix_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendShoutoutResponse.ProtoReflect.Descriptor instead.
func (*SendShoutoutResponse) Descriptor() ([]byte, []int) {
	return file_twitch_v1_helix_proto_rawDescGZIP(), []int{22}
}

type SendAnnouncementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcasterId string  `protobuf:"bytes,1,opt,name=broadcaster_id,json=broadcasterId,proto3" json:"broadcaster_id,omitempty"`
	ModeratorId   string  `protobuf:"bytes,2,opt,name=moderator_id,json=moderatorId,proto3" json:"moderator_id,omitempty"`
	Message       string  `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Color         *string `protobuf:"bytes,4,opt,name=color,proto3,oneof" json:"color,omitempty"`
}

func (x *SendAnnouncementRequest) Reset() {
	*x = SendAnnouncementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_helix_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendAnnouncementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendAnnouncementRequest) ProtoMessage() {}

func (x *SendAnnouncementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_helix_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendAnnouncementRequest.ProtoReflect.Descriptor instead.
func (*SendAnnouncementRequest) Descriptor() ([]byte, []int) {
	return file_twitch_v1_helix_proto_rawDescGZIP(), []int{23}
}

func (x *SendAnnouncementRequest) GetBroadcasterId() string {
	if x != nil {
		return x.BroadcasterId
	}
	return ""
}

func (x *SendAnnouncementRequest) GetModeratorId() string {
	if x != nil {
		return x.ModeratorId
	}
	return ""
}

func (x *SendAnnouncementRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SendAnnouncementRequest) GetColor() string {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return ""
}

type SendAnnouncementResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SendAnnouncementResponse) Reset() {
	*x = SendAnnouncementResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_helix_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendAnnouncementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendAnnouncementResponse) ProtoMessage() {}

func (x *SendAnnouncementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_helix_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendAnnouncementResponse.ProtoReflect.Descriptor instead.
func (*SendAnnouncementResponse) Descriptor() ([]byte, []int) {
	return file_twitch_v1_helix_proto_rawDescGZIP(), []int{24}
}

type GetChattersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcasterId string `protobuf:"bytes,1,opt,name=broadcaster_id,json=broadcasterId,proto3" json:"broadcaster_id,omitempty"`
	ModeratorId   string `protobuf:"bytes,2,opt,name=moderator_id,json=moderatorId,proto3" json:"moderator_id,omitempty"`
}

func (x *GetChattersRequest) Reset() {
	*x = GetChattersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_helix_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChattersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChattersRequest) ProtoMessage() {}

func (x *GetChattersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_helix_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChattersRequest.ProtoReflect.Descriptor instead.
func (*GetChattersRequest) Descriptor() ([]byte, []int) {
	return file_twitch_v1_helix_proto_rawDescGZIP(), []int{25}
}

func (x *GetChattersRequest) GetBroadcasterId() string {
	if x != nil {
		return x.BroadcasterId
	}
	return ""
}

func (x *GetChattersRequest) GetModeratorId() string {
	if x != nil {
		return x.ModeratorId
	}
	return ""
}

type Chatter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserLogin string `protobuf:"bytes,2,opt,name=user_login,json=userLogin,proto3" json:"user_login,omitempty"`
	Username  string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *Chatter) Reset() {
	*x = Chatter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_helix_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chatter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chatter) ProtoMessage() {}

func (x *Chatter) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_helix_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chatter.ProtoReflect.Descriptor instead.
func (*Chatter) Descriptor() ([]byte, []int) {
	return file_twitch_v1_helix_proto_rawDescGZIP(), []int{26}
}

func (x *Chatter) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Chatter) GetUserLogin() string {
	if x != nil {
		return x.UserLogin
	}
	return ""
}

func (x *Chatter) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type GetChattersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chatters []*Chatter `protobuf:"bytes,1,rep,name=chatters,proto3" json:"chatters,omitempty"`
}

func (x *GetChattersResponse) Reset() {
	*x = GetChattersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_helix_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChattersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChattersResponse) ProtoMessage() {}

func (x *GetChattersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_helix_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChattersResponse.ProtoReflect.Descriptor instead.
func (*GetChattersResponse) Descriptor() ([]byte, []int) {
	return file_twitch_v1_helix_proto_rawDescGZIP(), []int{27}
}

func (x *GetChattersResponse) GetChatters() []*Chatter {
	if x != nil {
		return x.Chatters
	}
	return nil
}

type SendChatMessageResponse_DropReason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SendChatMessageResponse_DropReason) Reset() {
	*x = SendChatMessageResponse_DropReason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_twitch_v1_helix_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendChatMessageResponse_DropReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendChatMessageResponse_DropReason) ProtoMessage() {}

func (x *SendChatMessageResponse_DropReason) ProtoReflect() protoreflect.Message {
	mi := &file_twitch_v1_helix_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendChatMessageResponse_DropReason.ProtoReflect.Descriptor instead.
func (*SendChatMessageResponse_DropReason) Descriptor() ([]byte, []int) {
	return file_twitch_v1_helix_proto_rawDescGZIP(), []int{1, 0}
}

func (x *SendChatMessageResponse_DropReason) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *SendChatMessageResponse_DropReason) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_twitch_v1_helix_proto protoreflect.FileDescriptor

var file_twitch_v1_helix_proto_rawDesc = []byte{
	0x0a, 0x15, 0x74, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x65, 0x6c, 0x69,
	0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x74, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x22, 0xad, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x17, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x69, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x1a, 0x3a, 0x0a, 0x0a, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x43, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x42,
	0x06, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0xf1, 0x02, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2a, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x6f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x76, 0x69, 0x65,
	0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x45, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x62,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x22, 0xb9, 0x03, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x62,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x42, 0x0a, 0x1d,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x1b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73,
	0x42, 0x72, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x45,
	0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x63, 0x6f, 0x73, 0x74, 0x22, 0x5a, 0x0a, 0x13, 0x4d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6d,
	0x61, 0x78, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x22, 0x71, 0x0a, 0x1a, 0x4d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x34,
	0x0a, 0x17, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x13, 0x6d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x22, 0x6e, 0x0a, 0x15, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f,
	0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x17,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x22, 0x53, 0x0a, 0x0c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x75, 0x72, 0x6c, 0x5f, 0x31, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x72, 0x6c, 0x31, 0x78, 0x12, 0x15, 0x0a, 0x06, 0x75,
	0x72, 0x6c, 0x5f, 0x32, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x72, 0x6c,
	0x32, 0x78, 0x12, 0x15, 0x0a, 0x06, 0x75, 0x72, 0x6c, 0x5f, 0x34, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x75, 0x72, 0x6c, 0x34, 0x78, 0x22, 0xe3, 0x07, 0x0a, 0x14, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a,
	0x11, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x6f,
	0x6d, 0x70, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x53, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x50, 0x65, 0x72,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x6a, 0x0a,
	0x1f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x1a, 0x6d,
	0x61, 0x78, 0x50, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x58, 0x0a, 0x17, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6f,
	0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x15, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64,
	0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x49, 0x6e, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x12, 0x3c, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x50,
	0x0a, 0x25, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x73,
	0x68, 0x6f, 0x75, 0x6c, 0x64, 0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x53, 0x6b, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x12, 0x4d, 0x0a, 0x23, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x65, 0x64, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x72,
	0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d,
	0x65, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f,
	0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x22,
	0x55, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a,
	0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x74, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x40, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x22,
	0xe1, 0x08, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6d,
	0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6d,
	0x70, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e,
	0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x04, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x38, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x05, 0x52, 0x13, 0x69, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x19,
	0x69, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x06, 0x52, 0x15, 0x69, 0x73, 0x4d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x6d,
	0x61, 0x78, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x07, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x22, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x08, 0x52, 0x1c, 0x69, 0x73, 0x4d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x17, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x48, 0x09, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x50, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x88, 0x01, 0x01,
	0x12, 0x40, 0x0a, 0x1a, 0x69, 0x73, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x63, 0x6f,
	0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x0a, 0x52, 0x17, 0x69, 0x73, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x3b, 0x0a, 0x17, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6f,
	0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x0b, 0x52, 0x15, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6f,
	0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x0c, 0x52, 0x08, 0x69, 0x73, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x55, 0x0a, 0x25, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x72, 0x65, 0x64, 0x65,
	0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x0d, 0x52, 0x21, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x52, 0x65, 0x64, 0x65, 0x6d, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x6b, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x72,
	0x6f, 0x6d, 0x70, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x69, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x42, 0x1c, 0x0a, 0x1a,
	0x5f, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x25, 0x0a,
	0x23, 0x5f, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x69, 0x73, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42,
	0x1a, 0x0a, 0x18, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x64,
	0x6f, 0x77, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x69, 0x73, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x42, 0x28, 0x0a, 0x26, 0x5f, 0x73, 0x68,
	0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x22, 0x55, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x37, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x5b, 0x0a, 0x19, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1c, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x20, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x64,
	0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x68,
	0x6f, 0x75, 0x74, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a,
	0x13, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x72, 0x6f, 0x6d,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x11, 0x74, 0x6f, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x6f, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x6f, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x16, 0x0a, 0x14,
	0x53, 0x65, 0x6e, 0x64, 0x53, 0x68, 0x6f, 0x75, 0x74, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x17, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x6e, 0x6e,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d,
	0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x1a, 0x0a, 0x18, 0x53, 0x65, 0x6e,
	0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x62,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x45, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x63,
	0x68, 0x61, 0x74, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x74, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x52, 0x08, 0x63, 0x68, 0x61, 0x74, 0x74, 0x65, 0x72, 0x73, 0x42, 0x2f, 0x5a, 0x2d, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6c, 0x6c, 0x2f, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x64, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x74, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x2f, 0x76, 0x31, 0x3b, 0x74, 0x77, 0x69, 0x74, 0x63, 0x68, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_twitch_v1_helix_proto_rawDescOnce sync.Once
	file_twitch_v1_helix_proto_rawDescData = file_twitch_v1_helix_proto_rawDesc
)

func file_twitch_v1_helix_proto_rawDescGZIP() []byte {
	file_twitch_v1_helix_proto_rawDescOnce.Do(func() {
		file_twitch_v1_helix_proto_rawDescData = protoimpl.X.CompressGZIP(file_twitch_v1_helix_proto_rawDescData)
	})
	return file_twitch_v1_helix_proto_rawDescData
}

var file_twitch_v1_helix_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_twitch_v1_helix_proto_goTypes = []interface{}{
	(*SendChatMessageRequest)(nil),             // 0: twitch.v1.SendChatMessageRequest
	(*SendChatMessageResponse)(nil),            // 1: twitch.v1.SendChatMessageResponse
	(*GetUsersRequest)(nil),                    // 2: twitch.v1.GetUsersRequest
	(*GetUsersResponse)(nil),                   // 3: twitch.v1.GetUsersResponse
	(*GetChannelInformationRequest)(nil),       // 4: twitch.v1.GetChannelInformationRequest
	(*GetChannelInformationResponse)(nil),      // 5: twitch.v1.GetChannelInformationResponse
	(*CreateCustomRewardRequest)(nil),          // 6: twitch.v1.CreateCustomRewardRequest
	(*MaxPerStreamSetting)(nil),                // 7: twitch.v1.MaxPerStreamSetting
	(*MaxPerUserPerStreamSetting)(nil),         // 8: twitch.v1.MaxPerUserPerStreamSetting
	(*GlobalCooldownSetting)(nil),              // 9: twitch.v1.GlobalCooldownSetting
	(*DefaultImage)(nil),                       // 10: twitch.v1.DefaultImage
	(*CustomRewardResponse)(nil),               // 11: twitch.v1.CustomRewardResponse
	(*CreateCustomRewardResponse)(nil),         // 12: twitch.v1.CreateCustomRewardResponse
	(*GetCustomRewardsRequest)(nil),            // 13: twitch.v1.GetCustomRewardsRequest
	(*GetCustomRewardsResponse)(nil),           // 14: twitch.v1.GetCustomRewardsResponse
	(*UpdateCustomRewardRequest)(nil),          // 15: twitch.v1.UpdateCustomRewardRequest
	(*UpdateCustomRewardResponse)(nil),         // 16: twitch.v1.UpdateCustomRewardResponse
	(*DeleteCustomRewardRequest)(nil),          // 17: twitch.v1.DeleteCustomRewardRequest
	(*DeleteCustomRewardResponse)(nil),         // 18: twitch.v1.DeleteCustomRewardResponse
	(*UpdateRedemptionStatusRequest)(nil),      // 19: twitch.v1.UpdateRedemptionStatusRequest
	(*UpdateRedemptionStatusResponse)(nil),     // 20: twitch.v1.UpdateRedemptionStatusResponse
	(*SendShoutoutRequest)(nil),                // 21: twitch.v1.SendShoutoutRequest
	(*SendShoutoutResponse)(nil),               // 22: twitch.v1.SendShoutoutResponse
	(*SendAnnouncementRequest)(nil),            // 23: twitch.v1.SendAnnouncementRequest
	(*SendAnnouncementResponse)(nil),           // 24: twitch.v1.SendAnnouncementResponse
	(*GetChattersRequest)(nil),                 // 25: twitch.v1.GetChattersRequest
	(*Chatter)(nil),                            // 26: twitch.v1.Chatter
	(*GetChattersResponse)(nil),                // 27: twitch.v1.GetChattersResponse
	(*SendChatMessageResponse_DropReason)(nil), // 28: twitch.v1.SendChatMessageResponse.DropReason
}
var file_twitch_v1_helix_proto_depIdxs = []int32{
	7,  // 0: twitch.v1.CustomRewardResponse.max_per_stream_setting:type_name -> twitch.v1.MaxPerStreamSetting
	8,  // 1: twitch.v1.CustomRewardResponse.max_per_user_per_stream_setting:type_name -> twitch.v1.MaxPerUserPerStreamSetting
	9,  // 2: twitch.v1.CustomRewardResponse.global_cooldown_setting:type_name -> twitch.v1.GlobalCooldownSetting
	10, // 3: twitch.v1.CustomRewardResponse.default_image:type_name -> twitch.v1.DefaultImage
	11, // 4: twitch.v1.CreateCustomRewardResponse.reward:type_name -> twitch.v1.CustomRewardResponse
	11, // 5: twitch.v1.GetCustomRewardsResponse.rewards:type_name -> twitch.v1.CustomRewardResponse
	11, // 6: twitch.v1.UpdateCustomRewardResponse.reward:type_name -> twitch.v1.CustomRewardResponse
	26, // 7: twitch.v1.GetChattersResponse.chatters:type_name -> twitch.v1.Chatter
	8,  // [8:8] is the sub-list for method output_type
	8,  // [8:8] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_twitch_v1_helix_proto_init() }
func file_twitch_v1_helix_proto_init() {
	if File_twitch_v1_helix_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_twitch_v1_helix_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendChatMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_helix_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendChatMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_helix_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_helix_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_helix_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelInformationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_helix_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelInformationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_helix_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCustomRewardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_helix_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxPerStreamSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_helix_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaxPerUserPerStreamSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_helix_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalCooldownSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_helix_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_helix_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomRewardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_helix_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCustomRewardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_helix_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomRewardsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_helix_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomRewardsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_helix_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCustomRewardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_helix_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCustomRewardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_helix_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCustomRewardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_helix_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCustomRewardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_helix_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRedemptionStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_helix_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRedemptionStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_helix_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendShoutoutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_helix_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendShoutoutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_helix_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendAnnouncementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_helix_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendAnnouncementResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_helix_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChattersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_helix_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chatter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_helix_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChattersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_twitch_v1_helix_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendChatMessageResponse_DropReason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_twitch_v1_helix_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*GetUsersRequest_Id)(nil),
		(*GetUsersRequest_Login)(nil),
	}
	file_twitch_v1_helix_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_twitch_v1_helix_proto_msgTypes[23].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_twitch_v1_helix_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_twitch_v1_helix_proto_goTypes,
		DependencyIndexes: file_twitch_v1_helix_proto_depIdxs,
		MessageInfos:      file_twitch_v1_helix_proto_msgTypes,
	}.Build()
	File_twitch_v1_helix_proto = out.File
	file_twitch_v1_helix_proto_rawDesc = nil
	file_twitch_v1_helix_proto_goTypes = nil
	file_twitch_v1_helix_proto_depIdxs = nil
}
